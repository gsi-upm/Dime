/*
* generated by Xtext
*/

package org.telcodev.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DimeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsStatementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cStaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStaStateParserRuleCall_3_0 = (RuleCall)cStaAssignment_3.eContents().get(0);
		
		//Document:
		//	"application" name=ID elements+=Statement* sta+=State*;
		public ParserRule getRule() { return rule; }

		//"application" name=ID elements+=Statement* sta+=State*
		public Group getGroup() { return cGroup; }

		//"application"
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//elements+=Statement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Statement
		public RuleCall getElementsStatementParserRuleCall_2_0() { return cElementsStatementParserRuleCall_2_0; }

		//sta+=State*
		public Assignment getStaAssignment_3() { return cStaAssignment_3; }

		//State
		public RuleCall getStaStateParserRuleCall_3_0() { return cStaStateParserRuleCall_3_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVoiceTagParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssigmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Assignment cComAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cComML_COMMENTTerminalRuleCall_5_0 = (RuleCall)cComAssignment_5.eContents().get(0);
		
		//Statement:
		//	NumVariable | StringVariable | BoolVariable | VoiceTag | Assigment | com=ML_COMMENT;
		public ParserRule getRule() { return rule; }

		//NumVariable | StringVariable | BoolVariable | VoiceTag | Assigment | com=ML_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumVariable
		public RuleCall getNumVariableParserRuleCall_0() { return cNumVariableParserRuleCall_0; }

		//StringVariable
		public RuleCall getStringVariableParserRuleCall_1() { return cStringVariableParserRuleCall_1; }

		//BoolVariable
		public RuleCall getBoolVariableParserRuleCall_2() { return cBoolVariableParserRuleCall_2; }

		//VoiceTag
		public RuleCall getVoiceTagParserRuleCall_3() { return cVoiceTagParserRuleCall_3; }

		//Assigment
		public RuleCall getAssigmentParserRuleCall_4() { return cAssigmentParserRuleCall_4; }

		//com=ML_COMMENT
		public Assignment getComAssignment_5() { return cComAssignment_5; }

		//ML_COMMENT
		public RuleCall getComML_COMMENTTerminalRuleCall_5_0() { return cComML_COMMENTTerminalRuleCall_5_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractElement:
		//	Statement | Transition | IfExp;
		public ParserRule getRule() { return rule; }

		//Statement | Transition | IfExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//Transition
		public RuleCall getTransitionParserRuleCall_1() { return cTransitionParserRuleCall_1; }

		//IfExp
		public RuleCall getIfExpParserRuleCall_2() { return cIfExpParserRuleCall_2; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cStateKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cTimesKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTimesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTimesINTTerminalRuleCall_0_2_1_0 = (RuleCall)cTimesAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cTimeoutKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cTimeoutAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTimeoutINTTerminalRuleCall_1_0_1_0 = (RuleCall)cTimeoutAssignment_1_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStmsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStmsAbstractElementParserRuleCall_1_2_0 = (RuleCall)cStmsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//State:
		//	"state" name=ID ("times" times=INT)? & ("timeout" timeout=INT)? "{" stms+=AbstractElement* "}";
		public ParserRule getRule() { return rule; }

		//"state" name=ID ("times" times=INT)? & ("timeout" timeout=INT)? "{" stms+=AbstractElement* "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"state" name=ID ("times" times=INT)?
		public Group getGroup_0() { return cGroup_0; }

		//"state"
		public Keyword getStateKeyword_0_0() { return cStateKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//("times" times=INT)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"times"
		public Keyword getTimesKeyword_0_2_0() { return cTimesKeyword_0_2_0; }

		//times=INT
		public Assignment getTimesAssignment_0_2_1() { return cTimesAssignment_0_2_1; }

		//INT
		public RuleCall getTimesINTTerminalRuleCall_0_2_1_0() { return cTimesINTTerminalRuleCall_0_2_1_0; }

		//("timeout" timeout=INT)? "{" stms+=AbstractElement* "}"
		public Group getGroup_1() { return cGroup_1; }

		//("timeout" timeout=INT)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"timeout"
		public Keyword getTimeoutKeyword_1_0_0() { return cTimeoutKeyword_1_0_0; }

		//timeout=INT
		public Assignment getTimeoutAssignment_1_0_1() { return cTimeoutAssignment_1_0_1; }

		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_1_0_1_0() { return cTimeoutINTTerminalRuleCall_1_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//stms+=AbstractElement*
		public Assignment getStmsAssignment_1_2() { return cStmsAssignment_1_2; }

		//AbstractElement
		public RuleCall getStmsAbstractElementParserRuleCall_1_2_0() { return cStmsAbstractElementParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class VoiceTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VoiceTag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDialParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecordParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGetDigitsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAskParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSendParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRejectParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cHangupParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCallParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//VoiceTag:
		//	Say | Dial | Play | Record | GetDigits | Ask | Send | Reject | Hangup | Call;
		public ParserRule getRule() { return rule; }

		//Say | Dial | Play | Record | GetDigits | Ask | Send | Reject | Hangup | Call
		public Alternatives getAlternatives() { return cAlternatives; }

		//Say
		public RuleCall getSayParserRuleCall_0() { return cSayParserRuleCall_0; }

		//Dial
		public RuleCall getDialParserRuleCall_1() { return cDialParserRuleCall_1; }

		//Play
		public RuleCall getPlayParserRuleCall_2() { return cPlayParserRuleCall_2; }

		//Record
		public RuleCall getRecordParserRuleCall_3() { return cRecordParserRuleCall_3; }

		//GetDigits
		public RuleCall getGetDigitsParserRuleCall_4() { return cGetDigitsParserRuleCall_4; }

		//Ask
		public RuleCall getAskParserRuleCall_5() { return cAskParserRuleCall_5; }

		//Send
		public RuleCall getSendParserRuleCall_6() { return cSendParserRuleCall_6; }

		//Reject
		public RuleCall getRejectParserRuleCall_7() { return cRejectParserRuleCall_7; }

		//Hangup
		public RuleCall getHangupParserRuleCall_8() { return cHangupParserRuleCall_8; }

		//Call
		public RuleCall getCallParserRuleCall_9() { return cCallParserRuleCall_9; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToConcatenationExpressionParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Call:
		//	"call" to=ConcatenationExpression ";";
		public ParserRule getRule() { return rule; }

		//"call" to=ConcatenationExpression ";"
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//to=ConcatenationExpression
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//ConcatenationExpression
		public RuleCall getToConcatenationExpressionParserRuleCall_1_0() { return cToConcatenationExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDialToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToConcatenationExpressionParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Dial:
		//	"dialTo" to=ConcatenationExpression ";";
		public ParserRule getRule() { return rule; }

		//"dialTo" to=ConcatenationExpression ";"
		public Group getGroup() { return cGroup; }

		//"dialTo"
		public Keyword getDialToKeyword_0() { return cDialToKeyword_0; }

		//to=ConcatenationExpression
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//ConcatenationExpression
		public RuleCall getToConcatenationExpressionParserRuleCall_1_0() { return cToConcatenationExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PlayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Play");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileConcatenationExpressionParserRuleCall_1_0 = (RuleCall)cFileAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Play:
		//	"play" file=ConcatenationExpression ";";
		public ParserRule getRule() { return rule; }

		//"play" file=ConcatenationExpression ";"
		public Group getGroup() { return cGroup; }

		//"play"
		public Keyword getPlayKeyword_0() { return cPlayKeyword_0; }

		//file=ConcatenationExpression
		public Assignment getFileAssignment_1() { return cFileAssignment_1; }

		//ConcatenationExpression
		public RuleCall getFileConcatenationExpressionParserRuleCall_1_0() { return cFileConcatenationExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class RecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Record");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		private final Keyword cSecondsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionConcatenationExpressionParserRuleCall_4_0 = (RuleCall)cActionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Record:
		//	"record" time=INT "seconds" "in" action=ConcatenationExpression ("->" name=ID)? ";";
		public ParserRule getRule() { return rule; }

		//"record" time=INT "seconds" "in" action=ConcatenationExpression ("->" name=ID)? ";"
		public Group getGroup() { return cGroup; }

		//"record"
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }

		//time=INT
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_1_0() { return cTimeINTTerminalRuleCall_1_0; }

		//"seconds"
		public Keyword getSecondsKeyword_2() { return cSecondsKeyword_2; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//action=ConcatenationExpression
		public Assignment getActionAssignment_4() { return cActionAssignment_4; }

		//ConcatenationExpression
		public RuleCall getActionConcatenationExpressionParserRuleCall_4_0() { return cActionConcatenationExpressionParserRuleCall_4_0; }

		//("->" name=ID)?
		public Group getGroup_5() { return cGroup_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//name=ID
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_1_0() { return cNameIDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class RejectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reject");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameRejectKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//Reject:
		//	name="reject;";
		public ParserRule getRule() { return rule; }

		//name="reject;"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"reject;"
		public Keyword getNameRejectKeyword_0() { return cNameRejectKeyword_0; }
	}

	public class HangupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hangup");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameHangUpKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//Hangup:
		//	name="hangUp;";
		public ParserRule getRule() { return rule; }

		//name="hangUp;"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"hangUp;"
		public Keyword getNameHangUpKeyword_0() { return cNameHangUpKeyword_0; }
	}

	public class GetDigitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetDigits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumDigitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumDigitsINTTerminalRuleCall_1_0 = (RuleCall)cNumDigitsAssignment_1.eContents().get(0);
		private final Keyword cDigitsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuestionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionConcatenationExpressionParserRuleCall_3_0 = (RuleCall)cQuestionAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GetDigits:
		//	"get" numDigits=INT "digits" question=ConcatenationExpression "->" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"get" numDigits=INT "digits" question=ConcatenationExpression "->" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"get"
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }

		//numDigits=INT
		public Assignment getNumDigitsAssignment_1() { return cNumDigitsAssignment_1; }

		//INT
		public RuleCall getNumDigitsINTTerminalRuleCall_1_0() { return cNumDigitsINTTerminalRuleCall_1_0; }

		//"digits"
		public Keyword getDigitsKeyword_2() { return cDigitsKeyword_2; }

		//question=ConcatenationExpression
		public Assignment getQuestionAssignment_3() { return cQuestionAssignment_3; }

		//ConcatenationExpression
		public RuleCall getQuestionConcatenationExpressionParserRuleCall_3_0() { return cQuestionConcatenationExpressionParserRuleCall_3_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class AskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionConcatenationExpressionParserRuleCall_1_0 = (RuleCall)cQuestionAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Ask:
		//	"ask" question=ConcatenationExpression "->" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"ask" question=ConcatenationExpression "->" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"ask"
		public Keyword getAskKeyword_0() { return cAskKeyword_0; }

		//question=ConcatenationExpression
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }

		//ConcatenationExpression
		public RuleCall getQuestionConcatenationExpressionParserRuleCall_1_0() { return cQuestionConcatenationExpressionParserRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Send");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsSendBlockParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlConcatenationExpressionParserRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Send:
		//	"send" params=SendBlock "to" url=ConcatenationExpression ";";
		public ParserRule getRule() { return rule; }

		//"send" params=SendBlock "to" url=ConcatenationExpression ";"
		public Group getGroup() { return cGroup; }

		//"send"
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }

		//params=SendBlock
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//SendBlock
		public RuleCall getParamsSendBlockParserRuleCall_1_0() { return cParamsSendBlockParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//url=ConcatenationExpression
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }

		//ConcatenationExpression
		public RuleCall getUrlConcatenationExpressionParserRuleCall_3_0() { return cUrlConcatenationExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SendBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SendBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSendBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueParamParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cStmsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmsNotPrimaryParamParserRuleCall_3_0 = (RuleCall)cStmsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SendBlock:
		//	{SendBlock} "{" value=Param stms+=NotPrimaryParam* "}";
		public ParserRule getRule() { return rule; }

		//{SendBlock} "{" value=Param stms+=NotPrimaryParam* "}"
		public Group getGroup() { return cGroup; }

		//{SendBlock}
		public Action getSendBlockAction_0() { return cSendBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//value=Param
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Param
		public RuleCall getValueParamParserRuleCall_2_0() { return cValueParamParserRuleCall_2_0; }

		//stms+=NotPrimaryParam*
		public Assignment getStmsAssignment_3() { return cStmsAssignment_3; }

		//NotPrimaryParam
		public RuleCall getStmsNotPrimaryParamParserRuleCall_3_0() { return cStmsNotPrimaryParamParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class NotPrimaryParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotPrimaryParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueParamParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NotPrimaryParam:
		//	"," value=Param;
		public ParserRule getRule() { return rule; }

		//"," value=Param
		public Group getGroup() { return cGroup; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//value=Param
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Param
		public RuleCall getValueParamParserRuleCall_1_0() { return cValueParamParserRuleCall_1_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cParamNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueConcatenationExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Param:
		//	paramName=STRING "=>" value=ConcatenationExpression;
		public ParserRule getRule() { return rule; }

		//paramName=STRING "=>" value=ConcatenationExpression
		public Group getGroup() { return cGroup; }

		//paramName=STRING
		public Assignment getParamNameAssignment_0() { return cParamNameAssignment_0; }

		//STRING
		public RuleCall getParamNameSTRINGTerminalRuleCall_0_0() { return cParamNameSTRINGTerminalRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//value=ConcatenationExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ConcatenationExpression
		public RuleCall getValueConcatenationExpressionParserRuleCall_2_0() { return cValueConcatenationExpressionParserRuleCall_2_0; }
	}

	public class SayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Say");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThatConcatenationExpressionParserRuleCall_1_0 = (RuleCall)cThatAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Say:
		//	"say" that=ConcatenationExpression ";";
		public ParserRule getRule() { return rule; }

		//"say" that=ConcatenationExpression ";"
		public Group getGroup() { return cGroup; }

		//"say"
		public Keyword getSayKeyword_0() { return cSayKeyword_0; }

		//that=ConcatenationExpression
		public Assignment getThatAssignment_1() { return cThatAssignment_1; }

		//ConcatenationExpression
		public RuleCall getThatConcatenationExpressionParserRuleCall_1_0() { return cThatConcatenationExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetStateCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetStateCrossReference_1_0.eContents().get(1);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventEventEnumTerminalRuleCall_3_0 = (RuleCall)cEventAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transition:
		//	"goTo" target=[State] "when" event=EventEnum ";";
		public ParserRule getRule() { return rule; }

		//"goTo" target=[State] "when" event=EventEnum ";"
		public Group getGroup() { return cGroup; }

		//"goTo"
		public Keyword getGoToKeyword_0() { return cGoToKeyword_0; }

		//target=[State]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[State]
		public CrossReference getTargetStateCrossReference_1_0() { return cTargetStateCrossReference_1_0; }

		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_1_0_1() { return cTargetStateIDTerminalRuleCall_1_0_1; }

		//"when"
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//event=EventEnum
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }

		//EventEnum
		public RuleCall getEventEventEnumTerminalRuleCall_3_0() { return cEventEventEnumTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class IfExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlockAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBlockCondBlockParserRuleCall_0_0 = (RuleCall)cBlockAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBlocksAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBlocksCondBlockParserRuleCall_1_1_0 = (RuleCall)cBlocksAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultBlockAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultBlockBlockParserRuleCall_2_1_0 = (RuleCall)cDefaultBlockAssignment_2_1.eContents().get(0);
		
		//// Estructures.
		//IfExp:
		//	block=CondBlock ("else" blocks+=CondBlock)* ("else" defaultBlock=Block)?;
		public ParserRule getRule() { return rule; }

		//block=CondBlock ("else" blocks+=CondBlock)* ("else" defaultBlock=Block)?
		public Group getGroup() { return cGroup; }

		//block=CondBlock
		public Assignment getBlockAssignment_0() { return cBlockAssignment_0; }

		//CondBlock
		public RuleCall getBlockCondBlockParserRuleCall_0_0() { return cBlockCondBlockParserRuleCall_0_0; }

		//("else" blocks+=CondBlock)*
		public Group getGroup_1() { return cGroup_1; }

		//"else"
		public Keyword getElseKeyword_1_0() { return cElseKeyword_1_0; }

		//blocks+=CondBlock
		public Assignment getBlocksAssignment_1_1() { return cBlocksAssignment_1_1; }

		//CondBlock
		public RuleCall getBlocksCondBlockParserRuleCall_1_1_0() { return cBlocksCondBlockParserRuleCall_1_1_0; }

		//("else" defaultBlock=Block)?
		public Group getGroup_2() { return cGroup_2; }

		//"else"
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }

		//defaultBlock=Block
		public Assignment getDefaultBlockAssignment_2_1() { return cDefaultBlockAssignment_2_1; }

		//Block
		public RuleCall getDefaultBlockBlockParserRuleCall_2_1_0() { return cDefaultBlockBlockParserRuleCall_2_1_0; }
	}

	public class CondBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CondBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondTerminalBoolExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionBlockParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//CondBlock:
		//	"if" cond=TerminalBoolExpression action=Block;
		public ParserRule getRule() { return rule; }

		//"if" cond=TerminalBoolExpression action=Block
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cond=TerminalBoolExpression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//TerminalBoolExpression
		public RuleCall getCondTerminalBoolExpressionParserRuleCall_1_0() { return cCondTerminalBoolExpressionParserRuleCall_1_0; }

		//action=Block
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }

		//Block
		public RuleCall getActionBlockParserRuleCall_2_0() { return cActionBlockParserRuleCall_2_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStaAbstractElementParserRuleCall_2_0 = (RuleCall)cStaAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} "{" sta+=AbstractElement* "}";
		public ParserRule getRule() { return rule; }

		//{Block} "{" sta+=AbstractElement* "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//sta+=AbstractElement*
		public Assignment getStaAssignment_2() { return cStaAssignment_2; }

		//AbstractElement
		public RuleCall getStaAbstractElementParserRuleCall_2_0() { return cStaAbstractElementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalBoolExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationBoolLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpLOGIC_WORDTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBoolExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Expression
		//BoolExpression:
		//	TerminalBoolExpression ({OperationBool.left=current} op=LOGIC_WORD right=BoolExpression)?;
		public ParserRule getRule() { return rule; }

		//TerminalBoolExpression ({OperationBool.left=current} op=LOGIC_WORD right=BoolExpression)?
		public Group getGroup() { return cGroup; }

		//TerminalBoolExpression
		public RuleCall getTerminalBoolExpressionParserRuleCall_0() { return cTerminalBoolExpressionParserRuleCall_0; }

		//({OperationBool.left=current} op=LOGIC_WORD right=BoolExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{OperationBool.left=current}
		public Action getOperationBoolLeftAction_1_0() { return cOperationBoolLeftAction_1_0; }

		//op=LOGIC_WORD
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//LOGIC_WORD
		public RuleCall getOpLOGIC_WORDTerminalRuleCall_1_1_0() { return cOpLOGIC_WORDTerminalRuleCall_1_1_0; }

		//right=BoolExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BoolExpression
		public RuleCall getRightBoolExpressionParserRuleCall_1_2_0() { return cRightBoolExpressionParserRuleCall_1_2_0; }
	}

	public class TerminalBoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalBoolExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompareExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNegExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBracketsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TerminalBoolExpression returns BoolExpression:
		//	BoolLiteral | CompareExpression | NegExpression | Literal | Brackets;
		public ParserRule getRule() { return rule; }

		//BoolLiteral | CompareExpression | NegExpression | Literal | Brackets
		public Alternatives getAlternatives() { return cAlternatives; }

		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_0() { return cBoolLiteralParserRuleCall_0; }

		//CompareExpression
		public RuleCall getCompareExpressionParserRuleCall_1() { return cCompareExpressionParserRuleCall_1; }

		//NegExpression
		public RuleCall getNegExpressionParserRuleCall_2() { return cNegExpressionParserRuleCall_2; }

		//Literal
		public RuleCall getLiteralParserRuleCall_3() { return cLiteralParserRuleCall_3; }

		//Brackets
		public RuleCall getBracketsParserRuleCall_4() { return cBracketsParserRuleCall_4; }
	}

	public class BracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Brackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpenOBRACKETTerminalRuleCall_0_0 = (RuleCall)cOpenAssignment_0.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjBoolExpressionParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Assignment cCloseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCloseCBRACKETTerminalRuleCall_2_0 = (RuleCall)cCloseAssignment_2.eContents().get(0);
		
		//Brackets:
		//	open=OBRACKET obj=BoolExpression close=CBRACKET;
		public ParserRule getRule() { return rule; }

		//open=OBRACKET obj=BoolExpression close=CBRACKET
		public Group getGroup() { return cGroup; }

		//open=OBRACKET
		public Assignment getOpenAssignment_0() { return cOpenAssignment_0; }

		//OBRACKET
		public RuleCall getOpenOBRACKETTerminalRuleCall_0_0() { return cOpenOBRACKETTerminalRuleCall_0_0; }

		//obj=BoolExpression
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//BoolExpression
		public RuleCall getObjBoolExpressionParserRuleCall_1_0() { return cObjBoolExpressionParserRuleCall_1_0; }

		//close=CBRACKET
		public Assignment getCloseAssignment_2() { return cCloseAssignment_2; }

		//CBRACKET
		public RuleCall getCloseCBRACKETTerminalRuleCall_2_0() { return cCloseCBRACKETTerminalRuleCall_2_0; }
	}

	public class CompareExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftLiteralAbsParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpCOMPARETerminalRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightLiteralAbsParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//CompareExpression:
		//	left=LiteralAbs op=COMPARE right=LiteralAbs;
		public ParserRule getRule() { return rule; }

		//left=LiteralAbs op=COMPARE right=LiteralAbs
		public Group getGroup() { return cGroup; }

		//left=LiteralAbs
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//LiteralAbs
		public RuleCall getLeftLiteralAbsParserRuleCall_0_0() { return cLeftLiteralAbsParserRuleCall_0_0; }

		//op=COMPARE
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//COMPARE
		public RuleCall getOpCOMPARETerminalRuleCall_1_0() { return cOpCOMPARETerminalRuleCall_1_0; }

		//right=LiteralAbs
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//LiteralAbs
		public RuleCall getRightLiteralAbsParserRuleCall_2_0() { return cRightLiteralAbsParserRuleCall_2_0; }
	}

	public class NegExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpNEGATIONTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjTerminalBoolExpressionParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		
		//NegExpression:
		//	op=NEGATION obj=TerminalBoolExpression;
		public ParserRule getRule() { return rule; }

		//op=NEGATION obj=TerminalBoolExpression
		public Group getGroup() { return cGroup; }

		//op=NEGATION
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//NEGATION
		public RuleCall getOpNEGATIONTerminalRuleCall_0_0() { return cOpNEGATIONTerminalRuleCall_0_0; }

		//obj=TerminalBoolExpression
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//TerminalBoolExpression
		public RuleCall getObjTerminalBoolExpressionParserRuleCall_1_0() { return cObjTerminalBoolExpressionParserRuleCall_1_0; }
	}

	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathTerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMATHTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMathExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MathExpression:
		//	MathTerminal ({Operation.left=current} op=MATH right=MathExpression)?;
		public ParserRule getRule() { return rule; }

		//MathTerminal ({Operation.left=current} op=MATH right=MathExpression)?
		public Group getGroup() { return cGroup; }

		//MathTerminal
		public RuleCall getMathTerminalParserRuleCall_0() { return cMathTerminalParserRuleCall_0; }

		//({Operation.left=current} op=MATH right=MathExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }

		//op=MATH
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//MATH
		public RuleCall getOpMATHTerminalRuleCall_1_1_0() { return cOpMATHTerminalRuleCall_1_1_0; }

		//right=MathExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MathExpression
		public RuleCall getRightMathExpressionParserRuleCall_1_2_0() { return cRightMathExpressionParserRuleCall_1_2_0; }
	}

	public class MathTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathBracketsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MathTerminal returns MathExpression:
		//	MathBrackets | Literal | NumLiteral;
		public ParserRule getRule() { return rule; }

		//MathBrackets | Literal | NumLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//MathBrackets
		public RuleCall getMathBracketsParserRuleCall_0() { return cMathBracketsParserRuleCall_0; }

		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }

		//NumLiteral
		public RuleCall getNumLiteralParserRuleCall_2() { return cNumLiteralParserRuleCall_2; }
	}

	public class MathBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpenOBRACKETTerminalRuleCall_0_0 = (RuleCall)cOpenAssignment_0.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjMathExpressionParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Assignment cCloseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCloseCBRACKETTerminalRuleCall_2_0 = (RuleCall)cCloseAssignment_2.eContents().get(0);
		
		//MathBrackets:
		//	open=OBRACKET obj=MathExpression close=CBRACKET;
		public ParserRule getRule() { return rule; }

		//open=OBRACKET obj=MathExpression close=CBRACKET
		public Group getGroup() { return cGroup; }

		//open=OBRACKET
		public Assignment getOpenAssignment_0() { return cOpenAssignment_0; }

		//OBRACKET
		public RuleCall getOpenOBRACKETTerminalRuleCall_0_0() { return cOpenOBRACKETTerminalRuleCall_0_0; }

		//obj=MathExpression
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//MathExpression
		public RuleCall getObjMathExpressionParserRuleCall_1_0() { return cObjMathExpressionParserRuleCall_1_0; }

		//close=CBRACKET
		public Assignment getCloseAssignment_2() { return cCloseAssignment_2; }

		//CBRACKET
		public RuleCall getCloseCBRACKETTerminalRuleCall_2_0() { return cCloseCBRACKETTerminalRuleCall_2_0; }
	}

	public class ConcatenationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcatenationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcatenationTerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConcatenationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpCONCATENATIONTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConcatenationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Concatenation expression
		//ConcatenationExpression:
		//	ConcatenationTerminal ({Concatenation.left=current} op=CONCATENATION right=ConcatenationExpression)?;
		public ParserRule getRule() { return rule; }

		//ConcatenationTerminal ({Concatenation.left=current} op=CONCATENATION right=ConcatenationExpression)?
		public Group getGroup() { return cGroup; }

		//ConcatenationTerminal
		public RuleCall getConcatenationTerminalParserRuleCall_0() { return cConcatenationTerminalParserRuleCall_0; }

		//({Concatenation.left=current} op=CONCATENATION right=ConcatenationExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Concatenation.left=current}
		public Action getConcatenationLeftAction_1_0() { return cConcatenationLeftAction_1_0; }

		//op=CONCATENATION
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//CONCATENATION
		public RuleCall getOpCONCATENATIONTerminalRuleCall_1_1_0() { return cOpCONCATENATIONTerminalRuleCall_1_1_0; }

		//right=ConcatenationExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ConcatenationExpression
		public RuleCall getRightConcatenationExpressionParserRuleCall_1_2_0() { return cRightConcatenationExpressionParserRuleCall_1_2_0; }
	}

	public class ConcatenationTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcatenationTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConcatenationBracketsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralAbsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcatenationTerminal returns ConcatenationExpression:
		//	ConcatenationBrackets | LiteralAbs;
		public ParserRule getRule() { return rule; }

		//ConcatenationBrackets | LiteralAbs
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConcatenationBrackets
		public RuleCall getConcatenationBracketsParserRuleCall_0() { return cConcatenationBracketsParserRuleCall_0; }

		//LiteralAbs
		public RuleCall getLiteralAbsParserRuleCall_1() { return cLiteralAbsParserRuleCall_1; }
	}

	public class ConcatenationBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcatenationBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpenOBRACKETTerminalRuleCall_0_0 = (RuleCall)cOpenAssignment_0.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjConcatenationExpressionParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Assignment cCloseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCloseCBRACKETTerminalRuleCall_2_0 = (RuleCall)cCloseAssignment_2.eContents().get(0);
		
		//ConcatenationBrackets:
		//	open=OBRACKET obj=ConcatenationExpression close=CBRACKET;
		public ParserRule getRule() { return rule; }

		//open=OBRACKET obj=ConcatenationExpression close=CBRACKET
		public Group getGroup() { return cGroup; }

		//open=OBRACKET
		public Assignment getOpenAssignment_0() { return cOpenAssignment_0; }

		//OBRACKET
		public RuleCall getOpenOBRACKETTerminalRuleCall_0_0() { return cOpenOBRACKETTerminalRuleCall_0_0; }

		//obj=ConcatenationExpression
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//ConcatenationExpression
		public RuleCall getObjConcatenationExpressionParserRuleCall_1_0() { return cObjConcatenationExpressionParserRuleCall_1_0; }

		//close=CBRACKET
		public Assignment getCloseAssignment_2() { return cCloseAssignment_2; }

		//CBRACKET
		public RuleCall getCloseCBRACKETTerminalRuleCall_2_0() { return cCloseCBRACKETTerminalRuleCall_2_0; }
	}

	public class StringVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueConcatenationExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Variable
		//StringVariable:
		//	"varString" name=ID ("=" value=ConcatenationExpression)? ";";
		public ParserRule getRule() { return rule; }

		//"varString" name=ID ("=" value=ConcatenationExpression)? ";"
		public Group getGroup() { return cGroup; }

		//"varString"
		public Keyword getVarStringKeyword_0() { return cVarStringKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" value=ConcatenationExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=ConcatenationExpression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//ConcatenationExpression
		public RuleCall getValueConcatenationExpressionParserRuleCall_2_1_0() { return cValueConcatenationExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class NumVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarNumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueMathExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NumVariable:
		//	"varNum" name=ID ("=" value=MathExpression)? ";";
		public ParserRule getRule() { return rule; }

		//"varNum" name=ID ("=" value=MathExpression)? ";"
		public Group getGroup() { return cGroup; }

		//"varNum"
		public Keyword getVarNumKeyword_0() { return cVarNumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" value=MathExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=MathExpression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//MathExpression
		public RuleCall getValueMathExpressionParserRuleCall_2_1_0() { return cValueMathExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class BoolVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBoolExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BoolVariable:
		//	"varBool" name=ID ("=" value=BoolExpression)? ";";
		public ParserRule getRule() { return rule; }

		//"varBool" name=ID ("=" value=BoolExpression)? ";"
		public Group getGroup() { return cGroup; }

		//"varBool"
		public Keyword getVarBoolKeyword_0() { return cVarBoolKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" value=BoolExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=BoolExpression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//BoolExpression
		public RuleCall getValueBoolExpressionParserRuleCall_2_1_0() { return cValueBoolExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AssigmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assigment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVaVarsCrossReference_0_0 = (CrossReference)cVaAssignment_0.eContents().get(0);
		private final RuleCall cVaVarsIDTerminalRuleCall_0_0_1 = (RuleCall)cVaVarsCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightMathExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assigment:
		//	va=[Vars] "=" right=MathExpression ";";
		public ParserRule getRule() { return rule; }

		//va=[Vars] "=" right=MathExpression ";"
		public Group getGroup() { return cGroup; }

		//va=[Vars]
		public Assignment getVaAssignment_0() { return cVaAssignment_0; }

		//[Vars]
		public CrossReference getVaVarsCrossReference_0_0() { return cVaVarsCrossReference_0_0; }

		//ID
		public RuleCall getVaVarsIDTerminalRuleCall_0_0_1() { return cVaVarsIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//right=MathExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//MathExpression
		public RuleCall getRightMathExpressionParserRuleCall_2_0() { return cRightMathExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vars");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGetDigitsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Vars:
		//	StringVariable | Ask | NumVariable | BoolVariable | GetDigits;
		public ParserRule getRule() { return rule; }

		//StringVariable | Ask | NumVariable | BoolVariable | GetDigits
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringVariable
		public RuleCall getStringVariableParserRuleCall_0() { return cStringVariableParserRuleCall_0; }

		//Ask
		public RuleCall getAskParserRuleCall_1() { return cAskParserRuleCall_1; }

		//NumVariable
		public RuleCall getNumVariableParserRuleCall_2() { return cNumVariableParserRuleCall_2; }

		//BoolVariable
		public RuleCall getBoolVariableParserRuleCall_3() { return cBoolVariableParserRuleCall_3; }

		//GetDigits
		public RuleCall getGetDigitsParserRuleCall_4() { return cGetDigitsParserRuleCall_4; }
	}

	public class LiteralAbsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralAbs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Literals
		//LiteralAbs:
		//	Literal | StringLiteral | BoolLiteral | NumLiteral;
		public ParserRule getRule() { return rule; }

		//Literal | StringLiteral | BoolLiteral | NumLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_2() { return cBoolLiteralParserRuleCall_2; }

		//NumLiteral
		public RuleCall getNumLiteralParserRuleCall_3() { return cNumLiteralParserRuleCall_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cVVarsCrossReference_0_0 = (CrossReference)cVAssignment_0.eContents().get(0);
		private final RuleCall cVVarsIDTerminalRuleCall_0_0_1 = (RuleCall)cVVarsCrossReference_0_0.eContents().get(1);
		private final Assignment cNulAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNulNULLTerminalRuleCall_1_0 = (RuleCall)cNulAssignment_1.eContents().get(0);
		private final Assignment cSesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSesSESSIONTerminalRuleCall_2_0 = (RuleCall)cSesAssignment_2.eContents().get(0);
		
		//Literal:
		//	v=[Vars] | nul=NULL | ses=SESSION;
		public ParserRule getRule() { return rule; }

		//v=[Vars] | nul=NULL | ses=SESSION
		public Alternatives getAlternatives() { return cAlternatives; }

		//v=[Vars]
		public Assignment getVAssignment_0() { return cVAssignment_0; }

		//[Vars]
		public CrossReference getVVarsCrossReference_0_0() { return cVVarsCrossReference_0_0; }

		//ID
		public RuleCall getVVarsIDTerminalRuleCall_0_0_1() { return cVVarsIDTerminalRuleCall_0_0_1; }

		//nul=NULL
		public Assignment getNulAssignment_1() { return cNulAssignment_1; }

		//NULL
		public RuleCall getNulNULLTerminalRuleCall_1_0() { return cNulNULLTerminalRuleCall_1_0; }

		//ses=SESSION
		public Assignment getSesAssignment_2() { return cSesAssignment_2; }

		//SESSION
		public RuleCall getSesSESSIONTerminalRuleCall_2_0() { return cSesSESSIONTerminalRuleCall_2_0; }
	}

	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BoolLiteral:
		//	{BoolLiteral} value=BOOL;
		public ParserRule getRule() { return rule; }

		//{BoolLiteral} value=BOOL
		public Group getGroup() { return cGroup; }

		//{BoolLiteral}
		public Action getBoolLiteralAction_0() { return cBoolLiteralAction_0; }

		//value=BOOL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_1_0() { return cValueBOOLTerminalRuleCall_1_0; }
	}

	public class NumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumLiteral:
		//	{NumLiteral} value=Number;
		public ParserRule getRule() { return rule; }

		//{NumLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{NumLiteral}
		public Action getNumLiteralAction_0() { return cNumLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral:
		//	{StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOUBLETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Number:
		//	DOUBLE | INT;
		public ParserRule getRule() { return rule; }

		//DOUBLE | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_0() { return cDOUBLETerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private DocumentElements pDocument;
	private StatementElements pStatement;
	private AbstractElementElements pAbstractElement;
	private StateElements pState;
	private VoiceTagElements pVoiceTag;
	private CallElements pCall;
	private DialElements pDial;
	private PlayElements pPlay;
	private RecordElements pRecord;
	private RejectElements pReject;
	private HangupElements pHangup;
	private GetDigitsElements pGetDigits;
	private AskElements pAsk;
	private SendElements pSend;
	private SendBlockElements pSendBlock;
	private NotPrimaryParamElements pNotPrimaryParam;
	private ParamElements pParam;
	private SayElements pSay;
	private TransitionElements pTransition;
	private IfExpElements pIfExp;
	private CondBlockElements pCondBlock;
	private BlockElements pBlock;
	private BoolExpressionElements pBoolExpression;
	private TerminalBoolExpressionElements pTerminalBoolExpression;
	private BracketsElements pBrackets;
	private CompareExpressionElements pCompareExpression;
	private NegExpressionElements pNegExpression;
	private MathExpressionElements pMathExpression;
	private MathTerminalElements pMathTerminal;
	private MathBracketsElements pMathBrackets;
	private ConcatenationExpressionElements pConcatenationExpression;
	private ConcatenationTerminalElements pConcatenationTerminal;
	private ConcatenationBracketsElements pConcatenationBrackets;
	private StringVariableElements pStringVariable;
	private NumVariableElements pNumVariable;
	private BoolVariableElements pBoolVariable;
	private AssigmentElements pAssigment;
	private VarsElements pVars;
	private LiteralAbsElements pLiteralAbs;
	private LiteralElements pLiteral;
	private BoolLiteralElements pBoolLiteral;
	private NumLiteralElements pNumLiteral;
	private StringLiteralElements pStringLiteral;
	private NumberElements pNumber;
	private TerminalRule tEventEnum;
	private TerminalRule tSESSION;
	private TerminalRule tDOUBLE;
	private TerminalRule tNULL;
	private TerminalRule tBOOL;
	private TerminalRule tLOGIC_WORD;
	private TerminalRule tCOMPARE;
	private TerminalRule tMATH;
	private TerminalRule tCONCATENATION;
	private TerminalRule tNEGATION;
	private TerminalRule tOBRACKET;
	private TerminalRule tCBRACKET;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DimeGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Document:
	//	"application" name=ID elements+=Statement* sta+=State*;
	public DocumentElements getDocumentAccess() {
		return (pDocument != null) ? pDocument : (pDocument = new DocumentElements());
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}

	//Statement:
	//	NumVariable | StringVariable | BoolVariable | VoiceTag | Assigment | com=ML_COMMENT;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//AbstractElement:
	//	Statement | Transition | IfExp;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//State:
	//	"state" name=ID ("times" times=INT)? & ("timeout" timeout=INT)? "{" stms+=AbstractElement* "}";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//VoiceTag:
	//	Say | Dial | Play | Record | GetDigits | Ask | Send | Reject | Hangup | Call;
	public VoiceTagElements getVoiceTagAccess() {
		return (pVoiceTag != null) ? pVoiceTag : (pVoiceTag = new VoiceTagElements());
	}
	
	public ParserRule getVoiceTagRule() {
		return getVoiceTagAccess().getRule();
	}

	//Call:
	//	"call" to=ConcatenationExpression ";";
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Dial:
	//	"dialTo" to=ConcatenationExpression ";";
	public DialElements getDialAccess() {
		return (pDial != null) ? pDial : (pDial = new DialElements());
	}
	
	public ParserRule getDialRule() {
		return getDialAccess().getRule();
	}

	//Play:
	//	"play" file=ConcatenationExpression ";";
	public PlayElements getPlayAccess() {
		return (pPlay != null) ? pPlay : (pPlay = new PlayElements());
	}
	
	public ParserRule getPlayRule() {
		return getPlayAccess().getRule();
	}

	//Record:
	//	"record" time=INT "seconds" "in" action=ConcatenationExpression ("->" name=ID)? ";";
	public RecordElements getRecordAccess() {
		return (pRecord != null) ? pRecord : (pRecord = new RecordElements());
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}

	//Reject:
	//	name="reject;";
	public RejectElements getRejectAccess() {
		return (pReject != null) ? pReject : (pReject = new RejectElements());
	}
	
	public ParserRule getRejectRule() {
		return getRejectAccess().getRule();
	}

	//Hangup:
	//	name="hangUp;";
	public HangupElements getHangupAccess() {
		return (pHangup != null) ? pHangup : (pHangup = new HangupElements());
	}
	
	public ParserRule getHangupRule() {
		return getHangupAccess().getRule();
	}

	//GetDigits:
	//	"get" numDigits=INT "digits" question=ConcatenationExpression "->" name=ID ";";
	public GetDigitsElements getGetDigitsAccess() {
		return (pGetDigits != null) ? pGetDigits : (pGetDigits = new GetDigitsElements());
	}
	
	public ParserRule getGetDigitsRule() {
		return getGetDigitsAccess().getRule();
	}

	//Ask:
	//	"ask" question=ConcatenationExpression "->" name=ID ";";
	public AskElements getAskAccess() {
		return (pAsk != null) ? pAsk : (pAsk = new AskElements());
	}
	
	public ParserRule getAskRule() {
		return getAskAccess().getRule();
	}

	//Send:
	//	"send" params=SendBlock "to" url=ConcatenationExpression ";";
	public SendElements getSendAccess() {
		return (pSend != null) ? pSend : (pSend = new SendElements());
	}
	
	public ParserRule getSendRule() {
		return getSendAccess().getRule();
	}

	//SendBlock:
	//	{SendBlock} "{" value=Param stms+=NotPrimaryParam* "}";
	public SendBlockElements getSendBlockAccess() {
		return (pSendBlock != null) ? pSendBlock : (pSendBlock = new SendBlockElements());
	}
	
	public ParserRule getSendBlockRule() {
		return getSendBlockAccess().getRule();
	}

	//NotPrimaryParam:
	//	"," value=Param;
	public NotPrimaryParamElements getNotPrimaryParamAccess() {
		return (pNotPrimaryParam != null) ? pNotPrimaryParam : (pNotPrimaryParam = new NotPrimaryParamElements());
	}
	
	public ParserRule getNotPrimaryParamRule() {
		return getNotPrimaryParamAccess().getRule();
	}

	//Param:
	//	paramName=STRING "=>" value=ConcatenationExpression;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//Say:
	//	"say" that=ConcatenationExpression ";";
	public SayElements getSayAccess() {
		return (pSay != null) ? pSay : (pSay = new SayElements());
	}
	
	public ParserRule getSayRule() {
		return getSayAccess().getRule();
	}

	//Transition:
	//	"goTo" target=[State] "when" event=EventEnum ";";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// Estructures.
	//IfExp:
	//	block=CondBlock ("else" blocks+=CondBlock)* ("else" defaultBlock=Block)?;
	public IfExpElements getIfExpAccess() {
		return (pIfExp != null) ? pIfExp : (pIfExp = new IfExpElements());
	}
	
	public ParserRule getIfExpRule() {
		return getIfExpAccess().getRule();
	}

	//CondBlock:
	//	"if" cond=TerminalBoolExpression action=Block;
	public CondBlockElements getCondBlockAccess() {
		return (pCondBlock != null) ? pCondBlock : (pCondBlock = new CondBlockElements());
	}
	
	public ParserRule getCondBlockRule() {
		return getCondBlockAccess().getRule();
	}

	//Block:
	//	{Block} "{" sta+=AbstractElement* "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//// Expression
	//BoolExpression:
	//	TerminalBoolExpression ({OperationBool.left=current} op=LOGIC_WORD right=BoolExpression)?;
	public BoolExpressionElements getBoolExpressionAccess() {
		return (pBoolExpression != null) ? pBoolExpression : (pBoolExpression = new BoolExpressionElements());
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//TerminalBoolExpression returns BoolExpression:
	//	BoolLiteral | CompareExpression | NegExpression | Literal | Brackets;
	public TerminalBoolExpressionElements getTerminalBoolExpressionAccess() {
		return (pTerminalBoolExpression != null) ? pTerminalBoolExpression : (pTerminalBoolExpression = new TerminalBoolExpressionElements());
	}
	
	public ParserRule getTerminalBoolExpressionRule() {
		return getTerminalBoolExpressionAccess().getRule();
	}

	//Brackets:
	//	open=OBRACKET obj=BoolExpression close=CBRACKET;
	public BracketsElements getBracketsAccess() {
		return (pBrackets != null) ? pBrackets : (pBrackets = new BracketsElements());
	}
	
	public ParserRule getBracketsRule() {
		return getBracketsAccess().getRule();
	}

	//CompareExpression:
	//	left=LiteralAbs op=COMPARE right=LiteralAbs;
	public CompareExpressionElements getCompareExpressionAccess() {
		return (pCompareExpression != null) ? pCompareExpression : (pCompareExpression = new CompareExpressionElements());
	}
	
	public ParserRule getCompareExpressionRule() {
		return getCompareExpressionAccess().getRule();
	}

	//NegExpression:
	//	op=NEGATION obj=TerminalBoolExpression;
	public NegExpressionElements getNegExpressionAccess() {
		return (pNegExpression != null) ? pNegExpression : (pNegExpression = new NegExpressionElements());
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//MathExpression:
	//	MathTerminal ({Operation.left=current} op=MATH right=MathExpression)?;
	public MathExpressionElements getMathExpressionAccess() {
		return (pMathExpression != null) ? pMathExpression : (pMathExpression = new MathExpressionElements());
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}

	//MathTerminal returns MathExpression:
	//	MathBrackets | Literal | NumLiteral;
	public MathTerminalElements getMathTerminalAccess() {
		return (pMathTerminal != null) ? pMathTerminal : (pMathTerminal = new MathTerminalElements());
	}
	
	public ParserRule getMathTerminalRule() {
		return getMathTerminalAccess().getRule();
	}

	//MathBrackets:
	//	open=OBRACKET obj=MathExpression close=CBRACKET;
	public MathBracketsElements getMathBracketsAccess() {
		return (pMathBrackets != null) ? pMathBrackets : (pMathBrackets = new MathBracketsElements());
	}
	
	public ParserRule getMathBracketsRule() {
		return getMathBracketsAccess().getRule();
	}

	//// Concatenation expression
	//ConcatenationExpression:
	//	ConcatenationTerminal ({Concatenation.left=current} op=CONCATENATION right=ConcatenationExpression)?;
	public ConcatenationExpressionElements getConcatenationExpressionAccess() {
		return (pConcatenationExpression != null) ? pConcatenationExpression : (pConcatenationExpression = new ConcatenationExpressionElements());
	}
	
	public ParserRule getConcatenationExpressionRule() {
		return getConcatenationExpressionAccess().getRule();
	}

	//ConcatenationTerminal returns ConcatenationExpression:
	//	ConcatenationBrackets | LiteralAbs;
	public ConcatenationTerminalElements getConcatenationTerminalAccess() {
		return (pConcatenationTerminal != null) ? pConcatenationTerminal : (pConcatenationTerminal = new ConcatenationTerminalElements());
	}
	
	public ParserRule getConcatenationTerminalRule() {
		return getConcatenationTerminalAccess().getRule();
	}

	//ConcatenationBrackets:
	//	open=OBRACKET obj=ConcatenationExpression close=CBRACKET;
	public ConcatenationBracketsElements getConcatenationBracketsAccess() {
		return (pConcatenationBrackets != null) ? pConcatenationBrackets : (pConcatenationBrackets = new ConcatenationBracketsElements());
	}
	
	public ParserRule getConcatenationBracketsRule() {
		return getConcatenationBracketsAccess().getRule();
	}

	//// Variable
	//StringVariable:
	//	"varString" name=ID ("=" value=ConcatenationExpression)? ";";
	public StringVariableElements getStringVariableAccess() {
		return (pStringVariable != null) ? pStringVariable : (pStringVariable = new StringVariableElements());
	}
	
	public ParserRule getStringVariableRule() {
		return getStringVariableAccess().getRule();
	}

	//NumVariable:
	//	"varNum" name=ID ("=" value=MathExpression)? ";";
	public NumVariableElements getNumVariableAccess() {
		return (pNumVariable != null) ? pNumVariable : (pNumVariable = new NumVariableElements());
	}
	
	public ParserRule getNumVariableRule() {
		return getNumVariableAccess().getRule();
	}

	//BoolVariable:
	//	"varBool" name=ID ("=" value=BoolExpression)? ";";
	public BoolVariableElements getBoolVariableAccess() {
		return (pBoolVariable != null) ? pBoolVariable : (pBoolVariable = new BoolVariableElements());
	}
	
	public ParserRule getBoolVariableRule() {
		return getBoolVariableAccess().getRule();
	}

	//Assigment:
	//	va=[Vars] "=" right=MathExpression ";";
	public AssigmentElements getAssigmentAccess() {
		return (pAssigment != null) ? pAssigment : (pAssigment = new AssigmentElements());
	}
	
	public ParserRule getAssigmentRule() {
		return getAssigmentAccess().getRule();
	}

	//Vars:
	//	StringVariable | Ask | NumVariable | BoolVariable | GetDigits;
	public VarsElements getVarsAccess() {
		return (pVars != null) ? pVars : (pVars = new VarsElements());
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}

	//// Literals
	//LiteralAbs:
	//	Literal | StringLiteral | BoolLiteral | NumLiteral;
	public LiteralAbsElements getLiteralAbsAccess() {
		return (pLiteralAbs != null) ? pLiteralAbs : (pLiteralAbs = new LiteralAbsElements());
	}
	
	public ParserRule getLiteralAbsRule() {
		return getLiteralAbsAccess().getRule();
	}

	//Literal:
	//	v=[Vars] | nul=NULL | ses=SESSION;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BoolLiteral:
	//	{BoolLiteral} value=BOOL;
	public BoolLiteralElements getBoolLiteralAccess() {
		return (pBoolLiteral != null) ? pBoolLiteral : (pBoolLiteral = new BoolLiteralElements());
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//NumLiteral:
	//	{NumLiteral} value=Number;
	public NumLiteralElements getNumLiteralAccess() {
		return (pNumLiteral != null) ? pNumLiteral : (pNumLiteral = new NumLiteralElements());
	}
	
	public ParserRule getNumLiteralRule() {
		return getNumLiteralAccess().getRule();
	}

	//StringLiteral:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//Number:
	//	DOUBLE | INT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//// Terminals
	//terminal EventEnum:
	//	"hangup" | "completed" | "error" | "times" | "timeout";
	public TerminalRule getEventEnumRule() {
		return (tEventEnum != null) ? tEventEnum : (tEventEnum = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EventEnum"));
	} 

	//terminal SESSION:
	//	"caller" | "lastState" | "time" | "called";
	public TerminalRule getSESSIONRule() {
		return (tSESSION != null) ? tSESSION : (tSESSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SESSION"));
	} 

	//terminal DOUBLE:
	//	INT "." INT;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return (tNULL != null) ? tNULL : (tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NULL"));
	} 

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal LOGIC_WORD:
	//	"&&" | "||";
	public TerminalRule getLOGIC_WORDRule() {
		return (tLOGIC_WORD != null) ? tLOGIC_WORD : (tLOGIC_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOGIC_WORD"));
	} 

	//terminal COMPARE:
	//	"<" | "==" | ">" | "<=" | ">=" | "!=";
	public TerminalRule getCOMPARERule() {
		return (tCOMPARE != null) ? tCOMPARE : (tCOMPARE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMPARE"));
	} 

	//terminal MATH:
	//	"*" | "/" | "-" | "+";
	public TerminalRule getMATHRule() {
		return (tMATH != null) ? tMATH : (tMATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MATH"));
	} 

	//terminal CONCATENATION:
	//	".";
	public TerminalRule getCONCATENATIONRule() {
		return (tCONCATENATION != null) ? tCONCATENATION : (tCONCATENATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONCATENATION"));
	} 

	////terminal LOOPSTATEMENT: 'break' | 'continue' ;
	//terminal NEGATION:
	//	"!";
	public TerminalRule getNEGATIONRule() {
		return (tNEGATION != null) ? tNEGATION : (tNEGATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEGATION"));
	} 

	//terminal OBRACKET:
	//	"(";
	public TerminalRule getOBRACKETRule() {
		return (tOBRACKET != null) ? tOBRACKET : (tOBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OBRACKET"));
	} 

	//terminal CBRACKET:
	//	")";
	public TerminalRule getCBRACKETRule() {
		return (tCBRACKET != null) ? tCBRACKET : (tCBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CBRACKET"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
