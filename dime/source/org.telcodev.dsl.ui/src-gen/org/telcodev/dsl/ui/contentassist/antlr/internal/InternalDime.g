/*
* generated by Xtext
*/
grammar InternalDime;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.telcodev.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.telcodev.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.telcodev.dsl.services.DimeGrammarAccess;

}

@parser::members {
 
 	private DimeGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DimeGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDocument
entryRuleDocument 
:
{ before(grammarAccess.getDocumentRule()); }
	 ruleDocument
{ after(grammarAccess.getDocumentRule()); } 
	 EOF 
;

// Rule Document
ruleDocument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDocumentAccess().getGroup()); }
(rule__Document__Group__0)
{ after(grammarAccess.getDocumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractElement
entryRuleAbstractElement 
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractElementAccess().getAlternatives()); }
(rule__AbstractElement__Alternatives)
{ after(grammarAccess.getAbstractElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getUnorderedGroup()); }
(rule__State__UnorderedGroup)
{ after(grammarAccess.getStateAccess().getUnorderedGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVoiceTag
entryRuleVoiceTag 
:
{ before(grammarAccess.getVoiceTagRule()); }
	 ruleVoiceTag
{ after(grammarAccess.getVoiceTagRule()); } 
	 EOF 
;

// Rule VoiceTag
ruleVoiceTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVoiceTagAccess().getAlternatives()); }
(rule__VoiceTag__Alternatives)
{ after(grammarAccess.getVoiceTagAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDial
entryRuleDial 
:
{ before(grammarAccess.getDialRule()); }
	 ruleDial
{ after(grammarAccess.getDialRule()); } 
	 EOF 
;

// Rule Dial
ruleDial
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDialAccess().getGroup()); }
(rule__Dial__Group__0)
{ after(grammarAccess.getDialAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlay
entryRulePlay 
:
{ before(grammarAccess.getPlayRule()); }
	 rulePlay
{ after(grammarAccess.getPlayRule()); } 
	 EOF 
;

// Rule Play
rulePlay
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlayAccess().getGroup()); }
(rule__Play__Group__0)
{ after(grammarAccess.getPlayAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecord
entryRuleRecord 
:
{ before(grammarAccess.getRecordRule()); }
	 ruleRecord
{ after(grammarAccess.getRecordRule()); } 
	 EOF 
;

// Rule Record
ruleRecord
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecordAccess().getGroup()); }
(rule__Record__Group__0)
{ after(grammarAccess.getRecordAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReject
entryRuleReject 
:
{ before(grammarAccess.getRejectRule()); }
	 ruleReject
{ after(grammarAccess.getRejectRule()); } 
	 EOF 
;

// Rule Reject
ruleReject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRejectAccess().getNameAssignment()); }
(rule__Reject__NameAssignment)
{ after(grammarAccess.getRejectAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHangup
entryRuleHangup 
:
{ before(grammarAccess.getHangupRule()); }
	 ruleHangup
{ after(grammarAccess.getHangupRule()); } 
	 EOF 
;

// Rule Hangup
ruleHangup
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHangupAccess().getNameAssignment()); }
(rule__Hangup__NameAssignment)
{ after(grammarAccess.getHangupAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetDigits
entryRuleGetDigits 
:
{ before(grammarAccess.getGetDigitsRule()); }
	 ruleGetDigits
{ after(grammarAccess.getGetDigitsRule()); } 
	 EOF 
;

// Rule GetDigits
ruleGetDigits
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetDigitsAccess().getGroup()); }
(rule__GetDigits__Group__0)
{ after(grammarAccess.getGetDigitsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAsk
entryRuleAsk 
:
{ before(grammarAccess.getAskRule()); }
	 ruleAsk
{ after(grammarAccess.getAskRule()); } 
	 EOF 
;

// Rule Ask
ruleAsk
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAskAccess().getGroup()); }
(rule__Ask__Group__0)
{ after(grammarAccess.getAskAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSend
entryRuleSend 
:
{ before(grammarAccess.getSendRule()); }
	 ruleSend
{ after(grammarAccess.getSendRule()); } 
	 EOF 
;

// Rule Send
ruleSend
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSendAccess().getGroup()); }
(rule__Send__Group__0)
{ after(grammarAccess.getSendAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSendBlock
entryRuleSendBlock 
:
{ before(grammarAccess.getSendBlockRule()); }
	 ruleSendBlock
{ after(grammarAccess.getSendBlockRule()); } 
	 EOF 
;

// Rule SendBlock
ruleSendBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSendBlockAccess().getGroup()); }
(rule__SendBlock__Group__0)
{ after(grammarAccess.getSendBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotPrimaryParam
entryRuleNotPrimaryParam 
:
{ before(grammarAccess.getNotPrimaryParamRule()); }
	 ruleNotPrimaryParam
{ after(grammarAccess.getNotPrimaryParamRule()); } 
	 EOF 
;

// Rule NotPrimaryParam
ruleNotPrimaryParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotPrimaryParamAccess().getGroup()); }
(rule__NotPrimaryParam__Group__0)
{ after(grammarAccess.getNotPrimaryParamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParam
entryRuleParam 
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamAccess().getGroup()); }
(rule__Param__Group__0)
{ after(grammarAccess.getParamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSay
entryRuleSay 
:
{ before(grammarAccess.getSayRule()); }
	 ruleSay
{ after(grammarAccess.getSayRule()); } 
	 EOF 
;

// Rule Say
ruleSay
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSayAccess().getGroup()); }
(rule__Say__Group__0)
{ after(grammarAccess.getSayAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExp
entryRuleIfExp 
:
{ before(grammarAccess.getIfExpRule()); }
	 ruleIfExp
{ after(grammarAccess.getIfExpRule()); } 
	 EOF 
;

// Rule IfExp
ruleIfExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExpAccess().getGroup()); }
(rule__IfExp__Group__0)
{ after(grammarAccess.getIfExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondBlock
entryRuleCondBlock 
:
{ before(grammarAccess.getCondBlockRule()); }
	 ruleCondBlock
{ after(grammarAccess.getCondBlockRule()); } 
	 EOF 
;

// Rule CondBlock
ruleCondBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCondBlockAccess().getGroup()); }
(rule__CondBlock__Group__0)
{ after(grammarAccess.getCondBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolExpression
entryRuleBoolExpression 
:
{ before(grammarAccess.getBoolExpressionRule()); }
	 ruleBoolExpression
{ after(grammarAccess.getBoolExpressionRule()); } 
	 EOF 
;

// Rule BoolExpression
ruleBoolExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolExpressionAccess().getGroup()); }
(rule__BoolExpression__Group__0)
{ after(grammarAccess.getBoolExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalBoolExpression
entryRuleTerminalBoolExpression 
:
{ before(grammarAccess.getTerminalBoolExpressionRule()); }
	 ruleTerminalBoolExpression
{ after(grammarAccess.getTerminalBoolExpressionRule()); } 
	 EOF 
;

// Rule TerminalBoolExpression
ruleTerminalBoolExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTerminalBoolExpressionAccess().getAlternatives()); }
(rule__TerminalBoolExpression__Alternatives)
{ after(grammarAccess.getTerminalBoolExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBrackets
entryRuleBrackets 
:
{ before(grammarAccess.getBracketsRule()); }
	 ruleBrackets
{ after(grammarAccess.getBracketsRule()); } 
	 EOF 
;

// Rule Brackets
ruleBrackets
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBracketsAccess().getGroup()); }
(rule__Brackets__Group__0)
{ after(grammarAccess.getBracketsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareExpression
entryRuleCompareExpression 
:
{ before(grammarAccess.getCompareExpressionRule()); }
	 ruleCompareExpression
{ after(grammarAccess.getCompareExpressionRule()); } 
	 EOF 
;

// Rule CompareExpression
ruleCompareExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup()); }
(rule__CompareExpression__Group__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegExpression
entryRuleNegExpression 
:
{ before(grammarAccess.getNegExpressionRule()); }
	 ruleNegExpression
{ after(grammarAccess.getNegExpressionRule()); } 
	 EOF 
;

// Rule NegExpression
ruleNegExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegExpressionAccess().getGroup()); }
(rule__NegExpression__Group__0)
{ after(grammarAccess.getNegExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMathExpression
entryRuleMathExpression 
:
{ before(grammarAccess.getMathExpressionRule()); }
	 ruleMathExpression
{ after(grammarAccess.getMathExpressionRule()); } 
	 EOF 
;

// Rule MathExpression
ruleMathExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMathExpressionAccess().getGroup()); }
(rule__MathExpression__Group__0)
{ after(grammarAccess.getMathExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMathTerminal
entryRuleMathTerminal 
:
{ before(grammarAccess.getMathTerminalRule()); }
	 ruleMathTerminal
{ after(grammarAccess.getMathTerminalRule()); } 
	 EOF 
;

// Rule MathTerminal
ruleMathTerminal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMathTerminalAccess().getAlternatives()); }
(rule__MathTerminal__Alternatives)
{ after(grammarAccess.getMathTerminalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMathBrackets
entryRuleMathBrackets 
:
{ before(grammarAccess.getMathBracketsRule()); }
	 ruleMathBrackets
{ after(grammarAccess.getMathBracketsRule()); } 
	 EOF 
;

// Rule MathBrackets
ruleMathBrackets
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMathBracketsAccess().getGroup()); }
(rule__MathBrackets__Group__0)
{ after(grammarAccess.getMathBracketsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcatenationExpression
entryRuleConcatenationExpression 
:
{ before(grammarAccess.getConcatenationExpressionRule()); }
	 ruleConcatenationExpression
{ after(grammarAccess.getConcatenationExpressionRule()); } 
	 EOF 
;

// Rule ConcatenationExpression
ruleConcatenationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcatenationExpressionAccess().getGroup()); }
(rule__ConcatenationExpression__Group__0)
{ after(grammarAccess.getConcatenationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcatenationTerminal
entryRuleConcatenationTerminal 
:
{ before(grammarAccess.getConcatenationTerminalRule()); }
	 ruleConcatenationTerminal
{ after(grammarAccess.getConcatenationTerminalRule()); } 
	 EOF 
;

// Rule ConcatenationTerminal
ruleConcatenationTerminal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcatenationTerminalAccess().getAlternatives()); }
(rule__ConcatenationTerminal__Alternatives)
{ after(grammarAccess.getConcatenationTerminalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcatenationBrackets
entryRuleConcatenationBrackets 
:
{ before(grammarAccess.getConcatenationBracketsRule()); }
	 ruleConcatenationBrackets
{ after(grammarAccess.getConcatenationBracketsRule()); } 
	 EOF 
;

// Rule ConcatenationBrackets
ruleConcatenationBrackets
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcatenationBracketsAccess().getGroup()); }
(rule__ConcatenationBrackets__Group__0)
{ after(grammarAccess.getConcatenationBracketsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringVariable
entryRuleStringVariable 
:
{ before(grammarAccess.getStringVariableRule()); }
	 ruleStringVariable
{ after(grammarAccess.getStringVariableRule()); } 
	 EOF 
;

// Rule StringVariable
ruleStringVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringVariableAccess().getGroup()); }
(rule__StringVariable__Group__0)
{ after(grammarAccess.getStringVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumVariable
entryRuleNumVariable 
:
{ before(grammarAccess.getNumVariableRule()); }
	 ruleNumVariable
{ after(grammarAccess.getNumVariableRule()); } 
	 EOF 
;

// Rule NumVariable
ruleNumVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumVariableAccess().getGroup()); }
(rule__NumVariable__Group__0)
{ after(grammarAccess.getNumVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolVariable
entryRuleBoolVariable 
:
{ before(grammarAccess.getBoolVariableRule()); }
	 ruleBoolVariable
{ after(grammarAccess.getBoolVariableRule()); } 
	 EOF 
;

// Rule BoolVariable
ruleBoolVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolVariableAccess().getGroup()); }
(rule__BoolVariable__Group__0)
{ after(grammarAccess.getBoolVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssigment
entryRuleAssigment 
:
{ before(grammarAccess.getAssigmentRule()); }
	 ruleAssigment
{ after(grammarAccess.getAssigmentRule()); } 
	 EOF 
;

// Rule Assigment
ruleAssigment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssigmentAccess().getGroup()); }
(rule__Assigment__Group__0)
{ after(grammarAccess.getAssigmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleLiteralAbs
entryRuleLiteralAbs 
:
{ before(grammarAccess.getLiteralAbsRule()); }
	 ruleLiteralAbs
{ after(grammarAccess.getLiteralAbsRule()); } 
	 EOF 
;

// Rule LiteralAbs
ruleLiteralAbs
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAbsAccess().getAlternatives()); }
(rule__LiteralAbs__Alternatives)
{ after(grammarAccess.getLiteralAbsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral 
:
{ before(grammarAccess.getBoolLiteralRule()); }
	 ruleBoolLiteral
{ after(grammarAccess.getBoolLiteralRule()); } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolLiteralAccess().getGroup()); }
(rule__BoolLiteral__Group__0)
{ after(grammarAccess.getBoolLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumLiteral
entryRuleNumLiteral 
:
{ before(grammarAccess.getNumLiteralRule()); }
	 ruleNumLiteral
{ after(grammarAccess.getNumLiteralRule()); } 
	 EOF 
;

// Rule NumLiteral
ruleNumLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumLiteralAccess().getGroup()); }
(rule__NumLiteral__Group__0)
{ after(grammarAccess.getNumLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getGroup()); }
(rule__StringLiteral__Group__0)
{ after(grammarAccess.getStringLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getAlternatives()); }
(rule__Number__Alternatives)
{ after(grammarAccess.getNumberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getNumVariableParserRuleCall_0()); }
	ruleNumVariable
{ after(grammarAccess.getStatementAccess().getNumVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getStringVariableParserRuleCall_1()); }
	ruleStringVariable
{ after(grammarAccess.getStatementAccess().getStringVariableParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBoolVariableParserRuleCall_2()); }
	ruleBoolVariable
{ after(grammarAccess.getStatementAccess().getBoolVariableParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getVoiceTagParserRuleCall_3()); }
	ruleVoiceTag
{ after(grammarAccess.getStatementAccess().getVoiceTagParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAssigmentParserRuleCall_4()); }
	ruleAssigment
{ after(grammarAccess.getStatementAccess().getAssigmentParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getComAssignment_5()); }
(rule__Statement__ComAssignment_5)
{ after(grammarAccess.getStatementAccess().getComAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getStatementParserRuleCall_0()); }
	ruleStatement
{ after(grammarAccess.getAbstractElementAccess().getStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractElementAccess().getTransitionParserRuleCall_1()); }
	ruleTransition
{ after(grammarAccess.getAbstractElementAccess().getTransitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractElementAccess().getIfExpParserRuleCall_2()); }
	ruleIfExp
{ after(grammarAccess.getAbstractElementAccess().getIfExpParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VoiceTag__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVoiceTagAccess().getSayParserRuleCall_0()); }
	ruleSay
{ after(grammarAccess.getVoiceTagAccess().getSayParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getDialParserRuleCall_1()); }
	ruleDial
{ after(grammarAccess.getVoiceTagAccess().getDialParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getPlayParserRuleCall_2()); }
	rulePlay
{ after(grammarAccess.getVoiceTagAccess().getPlayParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getRecordParserRuleCall_3()); }
	ruleRecord
{ after(grammarAccess.getVoiceTagAccess().getRecordParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getGetDigitsParserRuleCall_4()); }
	ruleGetDigits
{ after(grammarAccess.getVoiceTagAccess().getGetDigitsParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getAskParserRuleCall_5()); }
	ruleAsk
{ after(grammarAccess.getVoiceTagAccess().getAskParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getSendParserRuleCall_6()); }
	ruleSend
{ after(grammarAccess.getVoiceTagAccess().getSendParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getRejectParserRuleCall_7()); }
	ruleReject
{ after(grammarAccess.getVoiceTagAccess().getRejectParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getHangupParserRuleCall_8()); }
	ruleHangup
{ after(grammarAccess.getVoiceTagAccess().getHangupParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getVoiceTagAccess().getCallParserRuleCall_9()); }
	ruleCall
{ after(grammarAccess.getVoiceTagAccess().getCallParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalBoolExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalBoolExpressionAccess().getBoolLiteralParserRuleCall_0()); }
	ruleBoolLiteral
{ after(grammarAccess.getTerminalBoolExpressionAccess().getBoolLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTerminalBoolExpressionAccess().getCompareExpressionParserRuleCall_1()); }
	ruleCompareExpression
{ after(grammarAccess.getTerminalBoolExpressionAccess().getCompareExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTerminalBoolExpressionAccess().getNegExpressionParserRuleCall_2()); }
	ruleNegExpression
{ after(grammarAccess.getTerminalBoolExpressionAccess().getNegExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTerminalBoolExpressionAccess().getLiteralParserRuleCall_3()); }
	ruleLiteral
{ after(grammarAccess.getTerminalBoolExpressionAccess().getLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTerminalBoolExpressionAccess().getBracketsParserRuleCall_4()); }
	ruleBrackets
{ after(grammarAccess.getTerminalBoolExpressionAccess().getBracketsParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathTerminal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathTerminalAccess().getMathBracketsParserRuleCall_0()); }
	ruleMathBrackets
{ after(grammarAccess.getMathTerminalAccess().getMathBracketsParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMathTerminalAccess().getLiteralParserRuleCall_1()); }
	ruleLiteral
{ after(grammarAccess.getMathTerminalAccess().getLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMathTerminalAccess().getNumLiteralParserRuleCall_2()); }
	ruleNumLiteral
{ after(grammarAccess.getMathTerminalAccess().getNumLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationTerminal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationTerminalAccess().getConcatenationBracketsParserRuleCall_0()); }
	ruleConcatenationBrackets
{ after(grammarAccess.getConcatenationTerminalAccess().getConcatenationBracketsParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConcatenationTerminalAccess().getLiteralAbsParserRuleCall_1()); }
	ruleLiteralAbs
{ after(grammarAccess.getConcatenationTerminalAccess().getLiteralAbsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralAbs__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAbsAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getLiteralAbsAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAbsAccess().getStringLiteralParserRuleCall_1()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAbsAccess().getStringLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAbsAccess().getBoolLiteralParserRuleCall_2()); }
	ruleBoolLiteral
{ after(grammarAccess.getLiteralAbsAccess().getBoolLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAbsAccess().getNumLiteralParserRuleCall_3()); }
	ruleNumLiteral
{ after(grammarAccess.getLiteralAbsAccess().getNumLiteralParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getVAssignment_0()); }
(rule__Literal__VAssignment_0)
{ after(grammarAccess.getLiteralAccess().getVAssignment_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNulAssignment_1()); }
(rule__Literal__NulAssignment_1)
{ after(grammarAccess.getLiteralAccess().getNulAssignment_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSesAssignment_2()); }
(rule__Literal__SesAssignment_2)
{ after(grammarAccess.getLiteralAccess().getSesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getDOUBLETerminalRuleCall_0()); }
	RULE_DOUBLE
{ after(grammarAccess.getNumberAccess().getDOUBLETerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Document__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Document__Group__0__Impl
	rule__Document__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentAccess().getApplicationKeyword_0()); }

	'application' 

{ after(grammarAccess.getDocumentAccess().getApplicationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Document__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Document__Group__1__Impl
	rule__Document__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentAccess().getNameAssignment_1()); }
(rule__Document__NameAssignment_1)
{ after(grammarAccess.getDocumentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Document__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Document__Group__2__Impl
	rule__Document__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentAccess().getElementsAssignment_2()); }
(rule__Document__ElementsAssignment_2)*
{ after(grammarAccess.getDocumentAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Document__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Document__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentAccess().getStaAssignment_3()); }
(rule__Document__StaAssignment_3)*
{ after(grammarAccess.getDocumentAccess().getStaAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__State__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_0__0__Impl
	rule__State__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateKeyword_0_0()); }

	'state' 

{ after(grammarAccess.getStateAccess().getStateKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_0__1__Impl
	rule__State__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameAssignment_0_1()); }
(rule__State__NameAssignment_0_1)
{ after(grammarAccess.getStateAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_0_2()); }
(rule__State__Group_0_2__0)?
{ after(grammarAccess.getStateAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__State__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_0_2__0__Impl
	rule__State__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTimesKeyword_0_2_0()); }

	'times' 

{ after(grammarAccess.getStateAccess().getTimesKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTimesAssignment_0_2_1()); }
(rule__State__TimesAssignment_0_2_1)
{ after(grammarAccess.getStateAccess().getTimesAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__State__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_1__0__Impl
	rule__State__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_1_0()); }
(rule__State__Group_1_0__0)?
{ after(grammarAccess.getStateAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_1__1__Impl
	rule__State__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1_1()); }

	'{' 

{ after(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_1__2__Impl
	rule__State__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStmsAssignment_1_2()); }
(rule__State__StmsAssignment_1_2)*
{ after(grammarAccess.getStateAccess().getStmsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_1_3()); }

	'}' 

{ after(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__State__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_1_0__0__Impl
	rule__State__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTimeoutKeyword_1_0_0()); }

	'timeout' 

{ after(grammarAccess.getStateAccess().getTimeoutKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTimeoutAssignment_1_0_1()); }
(rule__State__TimeoutAssignment_1_0_1)
{ after(grammarAccess.getStateAccess().getTimeoutAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getCallKeyword_0()); }

	'call' 

{ after(grammarAccess.getCallAccess().getCallKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getToAssignment_1()); }
(rule__Call__ToAssignment_1)
{ after(grammarAccess.getCallAccess().getToAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getCallAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Dial__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dial__Group__0__Impl
	rule__Dial__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dial__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDialAccess().getDialToKeyword_0()); }

	'dialTo' 

{ after(grammarAccess.getDialAccess().getDialToKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dial__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dial__Group__1__Impl
	rule__Dial__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dial__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDialAccess().getToAssignment_1()); }
(rule__Dial__ToAssignment_1)
{ after(grammarAccess.getDialAccess().getToAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dial__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dial__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dial__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDialAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getDialAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Play__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Play__Group__0__Impl
	rule__Play__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Play__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlayAccess().getPlayKeyword_0()); }

	'play' 

{ after(grammarAccess.getPlayAccess().getPlayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Play__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Play__Group__1__Impl
	rule__Play__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Play__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlayAccess().getFileAssignment_1()); }
(rule__Play__FileAssignment_1)
{ after(grammarAccess.getPlayAccess().getFileAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Play__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Play__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Play__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlayAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getPlayAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Record__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group__0__Impl
	rule__Record__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getRecordKeyword_0()); }

	'record' 

{ after(grammarAccess.getRecordAccess().getRecordKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group__1__Impl
	rule__Record__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getTimeAssignment_1()); }
(rule__Record__TimeAssignment_1)
{ after(grammarAccess.getRecordAccess().getTimeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group__2__Impl
	rule__Record__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getSecondsKeyword_2()); }

	'seconds' 

{ after(grammarAccess.getRecordAccess().getSecondsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group__3__Impl
	rule__Record__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getRecordAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group__4__Impl
	rule__Record__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getActionAssignment_4()); }
(rule__Record__ActionAssignment_4)
{ after(grammarAccess.getRecordAccess().getActionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group__5__Impl
	rule__Record__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getGroup_5()); }
(rule__Record__Group_5__0)?
{ after(grammarAccess.getRecordAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getRecordAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Record__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group_5__0__Impl
	rule__Record__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getHyphenMinusGreaterThanSignKeyword_5_0()); }

	'->' 

{ after(grammarAccess.getRecordAccess().getHyphenMinusGreaterThanSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Record__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getNameAssignment_5_1()); }
(rule__Record__NameAssignment_5_1)
{ after(grammarAccess.getRecordAccess().getNameAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GetDigits__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetDigits__Group__0__Impl
	rule__GetDigits__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getGetKeyword_0()); }

	'get' 

{ after(grammarAccess.getGetDigitsAccess().getGetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetDigits__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetDigits__Group__1__Impl
	rule__GetDigits__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getNumDigitsAssignment_1()); }
(rule__GetDigits__NumDigitsAssignment_1)
{ after(grammarAccess.getGetDigitsAccess().getNumDigitsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetDigits__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetDigits__Group__2__Impl
	rule__GetDigits__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getDigitsKeyword_2()); }

	'digits' 

{ after(grammarAccess.getGetDigitsAccess().getDigitsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetDigits__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetDigits__Group__3__Impl
	rule__GetDigits__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getQuestionAssignment_3()); }
(rule__GetDigits__QuestionAssignment_3)
{ after(grammarAccess.getGetDigitsAccess().getQuestionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetDigits__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetDigits__Group__4__Impl
	rule__GetDigits__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getHyphenMinusGreaterThanSignKeyword_4()); }

	'->' 

{ after(grammarAccess.getGetDigitsAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetDigits__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetDigits__Group__5__Impl
	rule__GetDigits__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getNameAssignment_5()); }
(rule__GetDigits__NameAssignment_5)
{ after(grammarAccess.getGetDigitsAccess().getNameAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetDigits__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetDigits__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getGetDigitsAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Ask__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ask__Group__0__Impl
	rule__Ask__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ask__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAskAccess().getAskKeyword_0()); }

	'ask' 

{ after(grammarAccess.getAskAccess().getAskKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ask__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ask__Group__1__Impl
	rule__Ask__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ask__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAskAccess().getQuestionAssignment_1()); }
(rule__Ask__QuestionAssignment_1)
{ after(grammarAccess.getAskAccess().getQuestionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ask__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ask__Group__2__Impl
	rule__Ask__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ask__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAskAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getAskAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ask__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ask__Group__3__Impl
	rule__Ask__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Ask__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAskAccess().getNameAssignment_3()); }
(rule__Ask__NameAssignment_3)
{ after(grammarAccess.getAskAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ask__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ask__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ask__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAskAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAskAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Send__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__0__Impl
	rule__Send__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getSendKeyword_0()); }

	'send' 

{ after(grammarAccess.getSendAccess().getSendKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Send__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__1__Impl
	rule__Send__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getParamsAssignment_1()); }
(rule__Send__ParamsAssignment_1)
{ after(grammarAccess.getSendAccess().getParamsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Send__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__2__Impl
	rule__Send__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getToKeyword_2()); }

	'to' 

{ after(grammarAccess.getSendAccess().getToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Send__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__3__Impl
	rule__Send__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getUrlAssignment_3()); }
(rule__Send__UrlAssignment_3)
{ after(grammarAccess.getSendAccess().getUrlAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Send__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getSendAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SendBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SendBlock__Group__0__Impl
	rule__SendBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SendBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendBlockAccess().getSendBlockAction_0()); }
(

)
{ after(grammarAccess.getSendBlockAccess().getSendBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SendBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SendBlock__Group__1__Impl
	rule__SendBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SendBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getSendBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SendBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SendBlock__Group__2__Impl
	rule__SendBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SendBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendBlockAccess().getValueAssignment_2()); }
(rule__SendBlock__ValueAssignment_2)
{ after(grammarAccess.getSendBlockAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SendBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SendBlock__Group__3__Impl
	rule__SendBlock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SendBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendBlockAccess().getStmsAssignment_3()); }
(rule__SendBlock__StmsAssignment_3)*
{ after(grammarAccess.getSendBlockAccess().getStmsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SendBlock__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SendBlock__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SendBlock__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendBlockAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getSendBlockAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NotPrimaryParam__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotPrimaryParam__Group__0__Impl
	rule__NotPrimaryParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotPrimaryParam__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotPrimaryParamAccess().getCommaKeyword_0()); }

	',' 

{ after(grammarAccess.getNotPrimaryParamAccess().getCommaKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotPrimaryParam__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotPrimaryParam__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotPrimaryParam__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotPrimaryParamAccess().getValueAssignment_1()); }
(rule__NotPrimaryParam__ValueAssignment_1)
{ after(grammarAccess.getNotPrimaryParamAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Param__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Param__Group__0__Impl
	rule__Param__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getParamNameAssignment_0()); }
(rule__Param__ParamNameAssignment_0)
{ after(grammarAccess.getParamAccess().getParamNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Param__Group__1__Impl
	rule__Param__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getEqualsSignGreaterThanSignKeyword_1()); }

	'=>' 

{ after(grammarAccess.getParamAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Param__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getValueAssignment_2()); }
(rule__Param__ValueAssignment_2)
{ after(grammarAccess.getParamAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Say__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Say__Group__0__Impl
	rule__Say__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Say__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSayAccess().getSayKeyword_0()); }

	'say' 

{ after(grammarAccess.getSayAccess().getSayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Say__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Say__Group__1__Impl
	rule__Say__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Say__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSayAccess().getThatAssignment_1()); }
(rule__Say__ThatAssignment_1)
{ after(grammarAccess.getSayAccess().getThatAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Say__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Say__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Say__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSayAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getSayAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGoToKeyword_0()); }

	'goTo' 

{ after(grammarAccess.getTransitionAccess().getGoToKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTargetAssignment_1()); }
(rule__Transition__TargetAssignment_1)
{ after(grammarAccess.getTransitionAccess().getTargetAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getWhenKeyword_2()); }

	'when' 

{ after(grammarAccess.getTransitionAccess().getWhenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getEventAssignment_3()); }
(rule__Transition__EventAssignment_3)
{ after(grammarAccess.getTransitionAccess().getEventAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getTransitionAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExp__Group__0__Impl
	rule__IfExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getBlockAssignment_0()); }
(rule__IfExp__BlockAssignment_0)
{ after(grammarAccess.getIfExpAccess().getBlockAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExp__Group__1__Impl
	rule__IfExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getGroup_1()); }
(rule__IfExp__Group_1__0)*
{ after(grammarAccess.getIfExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExp__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getGroup_2()); }
(rule__IfExp__Group_2__0)?
{ after(grammarAccess.getIfExpAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExp__Group_1__0__Impl
	rule__IfExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getElseKeyword_1_0()); }

	'else' 

{ after(grammarAccess.getIfExpAccess().getElseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getBlocksAssignment_1_1()); }
(rule__IfExp__BlocksAssignment_1_1)
{ after(grammarAccess.getIfExpAccess().getBlocksAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfExp__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExp__Group_2__0__Impl
	rule__IfExp__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getElseKeyword_2_0()); }

	'else' 

{ after(grammarAccess.getIfExpAccess().getElseKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExp__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExp__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getDefaultBlockAssignment_2_1()); }
(rule__IfExp__DefaultBlockAssignment_2_1)
{ after(grammarAccess.getIfExpAccess().getDefaultBlockAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CondBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CondBlock__Group__0__Impl
	rule__CondBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCondBlockAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getCondBlockAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CondBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CondBlock__Group__1__Impl
	rule__CondBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CondBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCondBlockAccess().getCondAssignment_1()); }
(rule__CondBlock__CondAssignment_1)
{ after(grammarAccess.getCondBlockAccess().getCondAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CondBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CondBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCondBlockAccess().getActionAssignment_2()); }
(rule__CondBlock__ActionAssignment_2)
{ after(grammarAccess.getCondBlockAccess().getActionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStaAssignment_2()); }
(rule__Block__StaAssignment_2)*
{ after(grammarAccess.getBlockAccess().getStaAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BoolExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolExpression__Group__0__Impl
	rule__BoolExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExpressionAccess().getTerminalBoolExpressionParserRuleCall_0()); }
	ruleTerminalBoolExpression
{ after(grammarAccess.getBoolExpressionAccess().getTerminalBoolExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExpressionAccess().getGroup_1()); }
(rule__BoolExpression__Group_1__0)?
{ after(grammarAccess.getBoolExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolExpression__Group_1__0__Impl
	rule__BoolExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExpressionAccess().getOperationBoolLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBoolExpressionAccess().getOperationBoolLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolExpression__Group_1__1__Impl
	rule__BoolExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExpressionAccess().getOpAssignment_1_1()); }
(rule__BoolExpression__OpAssignment_1_1)
{ after(grammarAccess.getBoolExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExpressionAccess().getRightAssignment_1_2()); }
(rule__BoolExpression__RightAssignment_1_2)
{ after(grammarAccess.getBoolExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Brackets__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Brackets__Group__0__Impl
	rule__Brackets__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketsAccess().getOpenAssignment_0()); }
(rule__Brackets__OpenAssignment_0)
{ after(grammarAccess.getBracketsAccess().getOpenAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Brackets__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Brackets__Group__1__Impl
	rule__Brackets__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketsAccess().getObjAssignment_1()); }
(rule__Brackets__ObjAssignment_1)
{ after(grammarAccess.getBracketsAccess().getObjAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Brackets__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Brackets__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketsAccess().getCloseAssignment_2()); }
(rule__Brackets__CloseAssignment_2)
{ after(grammarAccess.getBracketsAccess().getCloseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__0__Impl
	rule__CompareExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getLeftAssignment_0()); }
(rule__CompareExpression__LeftAssignment_0)
{ after(grammarAccess.getCompareExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__1__Impl
	rule__CompareExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getOpAssignment_1()); }
(rule__CompareExpression__OpAssignment_1)
{ after(grammarAccess.getCompareExpressionAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getRightAssignment_2()); }
(rule__CompareExpression__RightAssignment_2)
{ after(grammarAccess.getCompareExpressionAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NegExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpression__Group__0__Impl
	rule__NegExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getOpAssignment_0()); }
(rule__NegExpression__OpAssignment_0)
{ after(grammarAccess.getNegExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getObjAssignment_1()); }
(rule__NegExpression__ObjAssignment_1)
{ after(grammarAccess.getNegExpressionAccess().getObjAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MathExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathExpression__Group__0__Impl
	rule__MathExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathExpressionAccess().getMathTerminalParserRuleCall_0()); }
	ruleMathTerminal
{ after(grammarAccess.getMathExpressionAccess().getMathTerminalParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathExpressionAccess().getGroup_1()); }
(rule__MathExpression__Group_1__0)?
{ after(grammarAccess.getMathExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MathExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathExpression__Group_1__0__Impl
	rule__MathExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathExpressionAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMathExpressionAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathExpression__Group_1__1__Impl
	rule__MathExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathExpressionAccess().getOpAssignment_1_1()); }
(rule__MathExpression__OpAssignment_1_1)
{ after(grammarAccess.getMathExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathExpressionAccess().getRightAssignment_1_2()); }
(rule__MathExpression__RightAssignment_1_2)
{ after(grammarAccess.getMathExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MathBrackets__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathBrackets__Group__0__Impl
	rule__MathBrackets__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathBrackets__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathBracketsAccess().getOpenAssignment_0()); }
(rule__MathBrackets__OpenAssignment_0)
{ after(grammarAccess.getMathBracketsAccess().getOpenAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathBrackets__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathBrackets__Group__1__Impl
	rule__MathBrackets__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MathBrackets__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathBracketsAccess().getObjAssignment_1()); }
(rule__MathBrackets__ObjAssignment_1)
{ after(grammarAccess.getMathBracketsAccess().getObjAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathBrackets__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathBrackets__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathBrackets__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathBracketsAccess().getCloseAssignment_2()); }
(rule__MathBrackets__CloseAssignment_2)
{ after(grammarAccess.getMathBracketsAccess().getCloseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConcatenationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatenationExpression__Group__0__Impl
	rule__ConcatenationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationExpressionAccess().getConcatenationTerminalParserRuleCall_0()); }
	ruleConcatenationTerminal
{ after(grammarAccess.getConcatenationExpressionAccess().getConcatenationTerminalParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatenationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationExpressionAccess().getGroup_1()); }
(rule__ConcatenationExpression__Group_1__0)?
{ after(grammarAccess.getConcatenationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcatenationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatenationExpression__Group_1__0__Impl
	rule__ConcatenationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationExpressionAccess().getConcatenationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getConcatenationExpressionAccess().getConcatenationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatenationExpression__Group_1__1__Impl
	rule__ConcatenationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationExpressionAccess().getOpAssignment_1_1()); }
(rule__ConcatenationExpression__OpAssignment_1_1)
{ after(grammarAccess.getConcatenationExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatenationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationExpressionAccess().getRightAssignment_1_2()); }
(rule__ConcatenationExpression__RightAssignment_1_2)
{ after(grammarAccess.getConcatenationExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConcatenationBrackets__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatenationBrackets__Group__0__Impl
	rule__ConcatenationBrackets__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationBrackets__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationBracketsAccess().getOpenAssignment_0()); }
(rule__ConcatenationBrackets__OpenAssignment_0)
{ after(grammarAccess.getConcatenationBracketsAccess().getOpenAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenationBrackets__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatenationBrackets__Group__1__Impl
	rule__ConcatenationBrackets__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationBrackets__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationBracketsAccess().getObjAssignment_1()); }
(rule__ConcatenationBrackets__ObjAssignment_1)
{ after(grammarAccess.getConcatenationBracketsAccess().getObjAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenationBrackets__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatenationBrackets__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationBrackets__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationBracketsAccess().getCloseAssignment_2()); }
(rule__ConcatenationBrackets__CloseAssignment_2)
{ after(grammarAccess.getConcatenationBracketsAccess().getCloseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StringVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringVariable__Group__0__Impl
	rule__StringVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringVariableAccess().getVarStringKeyword_0()); }

	'varString' 

{ after(grammarAccess.getStringVariableAccess().getVarStringKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringVariable__Group__1__Impl
	rule__StringVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringVariableAccess().getNameAssignment_1()); }
(rule__StringVariable__NameAssignment_1)
{ after(grammarAccess.getStringVariableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringVariable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringVariable__Group__2__Impl
	rule__StringVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringVariableAccess().getGroup_2()); }
(rule__StringVariable__Group_2__0)?
{ after(grammarAccess.getStringVariableAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringVariable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringVariable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringVariableAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getStringVariableAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StringVariable__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringVariable__Group_2__0__Impl
	rule__StringVariable__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariable__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringVariableAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getStringVariableAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringVariable__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringVariable__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariable__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringVariableAccess().getValueAssignment_2_1()); }
(rule__StringVariable__ValueAssignment_2_1)
{ after(grammarAccess.getStringVariableAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumVariable__Group__0__Impl
	rule__NumVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumVariableAccess().getVarNumKeyword_0()); }

	'varNum' 

{ after(grammarAccess.getNumVariableAccess().getVarNumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumVariable__Group__1__Impl
	rule__NumVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumVariableAccess().getNameAssignment_1()); }
(rule__NumVariable__NameAssignment_1)
{ after(grammarAccess.getNumVariableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumVariable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumVariable__Group__2__Impl
	rule__NumVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumVariable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumVariableAccess().getGroup_2()); }
(rule__NumVariable__Group_2__0)?
{ after(grammarAccess.getNumVariableAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumVariable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumVariable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumVariable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumVariableAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getNumVariableAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NumVariable__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumVariable__Group_2__0__Impl
	rule__NumVariable__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumVariable__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumVariableAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getNumVariableAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumVariable__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumVariable__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumVariable__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumVariableAccess().getValueAssignment_2_1()); }
(rule__NumVariable__ValueAssignment_2_1)
{ after(grammarAccess.getNumVariableAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolVariable__Group__0__Impl
	rule__BoolVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolVariableAccess().getVarBoolKeyword_0()); }

	'varBool' 

{ after(grammarAccess.getBoolVariableAccess().getVarBoolKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolVariable__Group__1__Impl
	rule__BoolVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolVariableAccess().getNameAssignment_1()); }
(rule__BoolVariable__NameAssignment_1)
{ after(grammarAccess.getBoolVariableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolVariable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolVariable__Group__2__Impl
	rule__BoolVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVariable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolVariableAccess().getGroup_2()); }
(rule__BoolVariable__Group_2__0)?
{ after(grammarAccess.getBoolVariableAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolVariable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolVariable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVariable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolVariableAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getBoolVariableAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BoolVariable__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolVariable__Group_2__0__Impl
	rule__BoolVariable__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVariable__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolVariableAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getBoolVariableAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolVariable__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolVariable__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVariable__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolVariableAccess().getValueAssignment_2_1()); }
(rule__BoolVariable__ValueAssignment_2_1)
{ after(grammarAccess.getBoolVariableAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assigment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assigment__Group__0__Impl
	rule__Assigment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assigment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssigmentAccess().getVaAssignment_0()); }
(rule__Assigment__VaAssignment_0)
{ after(grammarAccess.getAssigmentAccess().getVaAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assigment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assigment__Group__1__Impl
	rule__Assigment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assigment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssigmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssigmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assigment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assigment__Group__2__Impl
	rule__Assigment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assigment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssigmentAccess().getRightAssignment_2()); }
(rule__Assigment__RightAssignment_2)
{ after(grammarAccess.getAssigmentAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assigment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assigment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assigment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssigmentAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getAssigmentAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BoolLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolLiteral__Group__0__Impl
	rule__BoolLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolLiteralAccess().getBoolLiteralAction_0()); }
(

)
{ after(grammarAccess.getBoolLiteralAccess().getBoolLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolLiteralAccess().getValueAssignment_1()); }
(rule__BoolLiteral__ValueAssignment_1)
{ after(grammarAccess.getBoolLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumLiteral__Group__0__Impl
	rule__NumLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumLiteralAccess().getNumLiteralAction_0()); }
(

)
{ after(grammarAccess.getNumLiteralAccess().getNumLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumLiteralAccess().getValueAssignment_1()); }
(rule__NumLiteral__ValueAssignment_1)
{ after(grammarAccess.getNumLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringLiteral__Group__0__Impl
	rule__StringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
(

)
{ after(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
(rule__StringLiteral__ValueAssignment_1)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__State__UnorderedGroup
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getStateAccess().getUnorderedGroup());
    }
:
	rule__State__UnorderedGroup__0
	
	{getUnorderedGroupHelper().canLeave(grammarAccess.getStateAccess().getUnorderedGroup())}?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getStateAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__State__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStateAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getStateAccess().getUnorderedGroup(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getStateAccess().getGroup_0()); }
						(rule__State__Group_0__0)
						{ after(grammarAccess.getStateAccess().getGroup_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStateAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getStateAccess().getUnorderedGroup(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getStateAccess().getGroup_1()); }
						(rule__State__Group_1__0)
						{ after(grammarAccess.getStateAccess().getGroup_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStateAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__State__UnorderedGroup__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__UnorderedGroup__Impl
	rule__State__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__State__UnorderedGroup__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__Document__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDocumentAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Document__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentAccess().getElementsStatementParserRuleCall_2_0()); }
	ruleStatement{ after(grammarAccess.getDocumentAccess().getElementsStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Document__StaAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentAccess().getStaStateParserRuleCall_3_0()); }
	ruleState{ after(grammarAccess.getDocumentAccess().getStaStateParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ComAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getComML_COMMENTTerminalRuleCall_5_0()); }
	RULE_ML_COMMENT{ after(grammarAccess.getStatementAccess().getComML_COMMENTTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__TimesAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTimesINTTerminalRuleCall_0_2_1_0()); }
	RULE_INT{ after(grammarAccess.getStateAccess().getTimesINTTerminalRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__TimeoutAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTimeoutINTTerminalRuleCall_1_0_1_0()); }
	RULE_INT{ after(grammarAccess.getStateAccess().getTimeoutINTTerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__StmsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStmsAbstractElementParserRuleCall_1_2_0()); }
	ruleAbstractElement{ after(grammarAccess.getStateAccess().getStmsAbstractElementParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ToAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getToConcatenationExpressionParserRuleCall_1_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getCallAccess().getToConcatenationExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dial__ToAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDialAccess().getToConcatenationExpressionParserRuleCall_1_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getDialAccess().getToConcatenationExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Play__FileAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlayAccess().getFileConcatenationExpressionParserRuleCall_1_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getPlayAccess().getFileConcatenationExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Record__TimeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getTimeINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getRecordAccess().getTimeINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Record__ActionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getActionConcatenationExpressionParserRuleCall_4_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getRecordAccess().getActionConcatenationExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Record__NameAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordAccess().getNameIDTerminalRuleCall_5_1_0()); }
	RULE_ID{ after(grammarAccess.getRecordAccess().getNameIDTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reject__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRejectAccess().getNameRejectKeyword_0()); }
(
{ before(grammarAccess.getRejectAccess().getNameRejectKeyword_0()); }

	'reject;' 

{ after(grammarAccess.getRejectAccess().getNameRejectKeyword_0()); }
)

{ after(grammarAccess.getRejectAccess().getNameRejectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hangup__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHangupAccess().getNameHangUpKeyword_0()); }
(
{ before(grammarAccess.getHangupAccess().getNameHangUpKeyword_0()); }

	'hangUp;' 

{ after(grammarAccess.getHangupAccess().getNameHangUpKeyword_0()); }
)

{ after(grammarAccess.getHangupAccess().getNameHangUpKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__NumDigitsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getNumDigitsINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getGetDigitsAccess().getNumDigitsINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__QuestionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getQuestionConcatenationExpressionParserRuleCall_3_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getGetDigitsAccess().getQuestionConcatenationExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetDigits__NameAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetDigitsAccess().getNameIDTerminalRuleCall_5_0()); }
	RULE_ID{ after(grammarAccess.getGetDigitsAccess().getNameIDTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ask__QuestionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAskAccess().getQuestionConcatenationExpressionParserRuleCall_1_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getAskAccess().getQuestionConcatenationExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ask__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAskAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getAskAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Send__ParamsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getParamsSendBlockParserRuleCall_1_0()); }
	ruleSendBlock{ after(grammarAccess.getSendAccess().getParamsSendBlockParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Send__UrlAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getUrlConcatenationExpressionParserRuleCall_3_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getSendAccess().getUrlConcatenationExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SendBlock__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendBlockAccess().getValueParamParserRuleCall_2_0()); }
	ruleParam{ after(grammarAccess.getSendBlockAccess().getValueParamParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SendBlock__StmsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendBlockAccess().getStmsNotPrimaryParamParserRuleCall_3_0()); }
	ruleNotPrimaryParam{ after(grammarAccess.getSendBlockAccess().getStmsNotPrimaryParamParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotPrimaryParam__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotPrimaryParamAccess().getValueParamParserRuleCall_1_0()); }
	ruleParam{ after(grammarAccess.getNotPrimaryParamAccess().getValueParamParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ParamNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getParamNameSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getParamAccess().getParamNameSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getValueConcatenationExpressionParserRuleCall_2_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getParamAccess().getValueConcatenationExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Say__ThatAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSayAccess().getThatConcatenationExpressionParserRuleCall_1_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getSayAccess().getThatConcatenationExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__TargetAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTargetStateCrossReference_1_0()); }
(
{ before(grammarAccess.getTransitionAccess().getTargetStateIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getTargetStateIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getTargetStateCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__EventAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getEventEventEnumTerminalRuleCall_3_0()); }
	RULE_EVENTENUM{ after(grammarAccess.getTransitionAccess().getEventEventEnumTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__BlockAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getBlockCondBlockParserRuleCall_0_0()); }
	ruleCondBlock{ after(grammarAccess.getIfExpAccess().getBlockCondBlockParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__BlocksAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getBlocksCondBlockParserRuleCall_1_1_0()); }
	ruleCondBlock{ after(grammarAccess.getIfExpAccess().getBlocksCondBlockParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExp__DefaultBlockAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpAccess().getDefaultBlockBlockParserRuleCall_2_1_0()); }
	ruleBlock{ after(grammarAccess.getIfExpAccess().getDefaultBlockBlockParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CondBlock__CondAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCondBlockAccess().getCondTerminalBoolExpressionParserRuleCall_1_0()); }
	ruleTerminalBoolExpression{ after(grammarAccess.getCondBlockAccess().getCondTerminalBoolExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CondBlock__ActionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCondBlockAccess().getActionBlockParserRuleCall_2_0()); }
	ruleBlock{ after(grammarAccess.getCondBlockAccess().getActionBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StaAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStaAbstractElementParserRuleCall_2_0()); }
	ruleAbstractElement{ after(grammarAccess.getBlockAccess().getStaAbstractElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExpressionAccess().getOpLOGIC_WORDTerminalRuleCall_1_1_0()); }
	RULE_LOGIC_WORD{ after(grammarAccess.getBoolExpressionAccess().getOpLOGIC_WORDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExpressionAccess().getRightBoolExpressionParserRuleCall_1_2_0()); }
	ruleBoolExpression{ after(grammarAccess.getBoolExpressionAccess().getRightBoolExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__OpenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketsAccess().getOpenOBRACKETTerminalRuleCall_0_0()); }
	RULE_OBRACKET{ after(grammarAccess.getBracketsAccess().getOpenOBRACKETTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__ObjAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketsAccess().getObjBoolExpressionParserRuleCall_1_0()); }
	ruleBoolExpression{ after(grammarAccess.getBracketsAccess().getObjBoolExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__CloseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketsAccess().getCloseCBRACKETTerminalRuleCall_2_0()); }
	RULE_CBRACKET{ after(grammarAccess.getBracketsAccess().getCloseCBRACKETTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getLeftLiteralAbsParserRuleCall_0_0()); }
	ruleLiteralAbs{ after(grammarAccess.getCompareExpressionAccess().getLeftLiteralAbsParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getOpCOMPARETerminalRuleCall_1_0()); }
	RULE_COMPARE{ after(grammarAccess.getCompareExpressionAccess().getOpCOMPARETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getRightLiteralAbsParserRuleCall_2_0()); }
	ruleLiteralAbs{ after(grammarAccess.getCompareExpressionAccess().getRightLiteralAbsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getOpNEGATIONTerminalRuleCall_0_0()); }
	RULE_NEGATION{ after(grammarAccess.getNegExpressionAccess().getOpNEGATIONTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__ObjAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getObjTerminalBoolExpressionParserRuleCall_1_0()); }
	ruleTerminalBoolExpression{ after(grammarAccess.getNegExpressionAccess().getObjTerminalBoolExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathExpressionAccess().getOpMATHTerminalRuleCall_1_1_0()); }
	RULE_MATH{ after(grammarAccess.getMathExpressionAccess().getOpMATHTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathExpressionAccess().getRightMathExpressionParserRuleCall_1_2_0()); }
	ruleMathExpression{ after(grammarAccess.getMathExpressionAccess().getRightMathExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathBrackets__OpenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathBracketsAccess().getOpenOBRACKETTerminalRuleCall_0_0()); }
	RULE_OBRACKET{ after(grammarAccess.getMathBracketsAccess().getOpenOBRACKETTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathBrackets__ObjAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathBracketsAccess().getObjMathExpressionParserRuleCall_1_0()); }
	ruleMathExpression{ after(grammarAccess.getMathBracketsAccess().getObjMathExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathBrackets__CloseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathBracketsAccess().getCloseCBRACKETTerminalRuleCall_2_0()); }
	RULE_CBRACKET{ after(grammarAccess.getMathBracketsAccess().getCloseCBRACKETTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationExpressionAccess().getOpCONCATENATIONTerminalRuleCall_1_1_0()); }
	RULE_CONCATENATION{ after(grammarAccess.getConcatenationExpressionAccess().getOpCONCATENATIONTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationExpressionAccess().getRightConcatenationExpressionParserRuleCall_1_2_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getConcatenationExpressionAccess().getRightConcatenationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationBrackets__OpenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationBracketsAccess().getOpenOBRACKETTerminalRuleCall_0_0()); }
	RULE_OBRACKET{ after(grammarAccess.getConcatenationBracketsAccess().getOpenOBRACKETTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationBrackets__ObjAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationBracketsAccess().getObjConcatenationExpressionParserRuleCall_1_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getConcatenationBracketsAccess().getObjConcatenationExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenationBrackets__CloseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationBracketsAccess().getCloseCBRACKETTerminalRuleCall_2_0()); }
	RULE_CBRACKET{ after(grammarAccess.getConcatenationBracketsAccess().getCloseCBRACKETTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariable__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getStringVariableAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariable__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringVariableAccess().getValueConcatenationExpressionParserRuleCall_2_1_0()); }
	ruleConcatenationExpression{ after(grammarAccess.getStringVariableAccess().getValueConcatenationExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumVariable__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNumVariableAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumVariable__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumVariableAccess().getValueMathExpressionParserRuleCall_2_1_0()); }
	ruleMathExpression{ after(grammarAccess.getNumVariableAccess().getValueMathExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVariable__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBoolVariableAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVariable__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolVariableAccess().getValueBoolExpressionParserRuleCall_2_1_0()); }
	ruleBoolExpression{ after(grammarAccess.getBoolVariableAccess().getValueBoolExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assigment__VaAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssigmentAccess().getVaVarsCrossReference_0_0()); }
(
{ before(grammarAccess.getAssigmentAccess().getVaVarsIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAssigmentAccess().getVaVarsIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAssigmentAccess().getVaVarsCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assigment__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssigmentAccess().getRightMathExpressionParserRuleCall_2_0()); }
	ruleMathExpression{ after(grammarAccess.getAssigmentAccess().getRightMathExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__VAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getVVarsCrossReference_0_0()); }
(
{ before(grammarAccess.getLiteralAccess().getVVarsIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getLiteralAccess().getVVarsIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getLiteralAccess().getVVarsCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NulAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNulNULLTerminalRuleCall_1_0()); }
	RULE_NULL{ after(grammarAccess.getLiteralAccess().getNulNULLTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__SesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getSesSESSIONTerminalRuleCall_2_0()); }
	RULE_SESSION{ after(grammarAccess.getLiteralAccess().getSesSESSIONTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolLiteralAccess().getValueBOOLTerminalRuleCall_1_0()); }
	RULE_BOOL{ after(grammarAccess.getBoolLiteralAccess().getValueBOOLTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumLiteralAccess().getValueNumberParserRuleCall_1_0()); }
	ruleNumber{ after(grammarAccess.getNumLiteralAccess().getValueNumberParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_EVENTENUM : ('hangup'|'completed'|'error'|'times'|'timeout');

RULE_SESSION : ('caller'|'lastState'|'time'|'called');

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_NULL : 'null';

RULE_BOOL : ('true'|'false');

RULE_LOGIC_WORD : ('&&'|'||');

RULE_COMPARE : ('<'|'=='|'>'|'<='|'>='|'!=');

RULE_MATH : ('*'|'/'|'-'|'+');

RULE_CONCATENATION : '.';

RULE_NEGATION : '!';

RULE_OBRACKET : '(';

RULE_CBRACKET : ')';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


